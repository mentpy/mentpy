Search.setIndex({"alltitles": {"Acknowledgements": [[271, "acknowledgements"]], "An introduction to MB-QML": [[276, null]], "Citation": [[271, "citation"]], "Classes": [[21, "classes"]], "Classifying classical data": [[272, null]], "Code for plotting learning curve": [[274, null], [274, null], [274, null], [276, null], [277, null], [278, null]], "Code for plotting the exact solution": [[278, null]], "Conclusion": [[274, "conclusion"]], "Constructors": [[1, "constructors"], [11, null], [21, "constructors"], [37, null], [100, "constructors"], [125, null], [137, null], [150, null], [163, null], [176, "constructors"], [183, null], [195, "constructors"], [203, null], [223, null], [245, "constructors"], [252, null], [259, "constructors"]], "Contributing": [[271, "contributing"]], "Creating MBQC Circuits": [[267, null]], "Development Installation": [[270, "development-installation"]], "Different inputs": [[269, "different-inputs"]], "Discrete optimization for HEA": [[274, null]], "Features": [[271, "features"]], "Fisher information classifier": [[273, null]], "Flow": [[0, "flow"]], "Graph States": [[266, null]], "GraphState": [[266, "graphstate"]], "Install from Source": [[270, "install-from-source"]], "Install using pip": [[270, "install-using-pip"]], "Installation": [[270, null]], "Introduction to Measurement-based VQE": [[275, null]], "Learning a quantum instrument": [[278, null]], "MBQC Circuits": [[267, "mbqc-circuits"]], "MBQCircuits": [[0, "mbqcircuits"]], "Ment Operators": [[267, "ment-operators"]], "Methods": [[1, "methods"], [11, "methods"], [21, "methods"], [37, "methods"], [100, "methods"], [125, "methods"], [150, "methods"], [163, "methods"], [176, "methods"], [183, "methods"], [195, "methods"], [203, "methods"], [245, "methods"], [252, "methods"], [259, "methods"]], "Note": [[1, null], [267, null], [269, null], [271, null], [272, null], [273, null], [274, null], [275, null], [277, null], [278, null]], "Operators": [[0, null]], "Optimizers": [[0, "optimizers"]], "Optimizing with Deep Q-Learning": [[274, "optimizing-with-deep-q-learning"]], "Optimizing with Greedy Search": [[274, "optimizing-with-greedy-search"]], "Parallelizing MB-QML protocols": [[277, null]], "Properties": [[1, "properties"], [11, "properties"], [21, "properties"], [100, "properties"], [125, "properties"], [137, "properties"], [150, "properties"], [163, "properties"], [183, "properties"], [195, "properties"]], "Quantum Circuit and loss function": [[274, "quantum-circuit-and-loss-function"]], "References": [[267, "references"], [272, "references"], [276, "references"]], "Roadmap": [[271, "roadmap"]], "Running the circuit": [[269, "running-the-circuit"]], "See also": [[1, null], [21, null], [27, null], [30, null], [31, null], [32, null], [33, null], [34, null], [71, null], [82, null], [85, null], [86, null], [87, null], [88, null], [89, null], [90, null], [91, null], [92, null], [97, null], [99, null], [100, null], [176, null], [195, null], [245, null], [259, null]], "Set up the environment": [[274, null]], "Simulating MBQC Circuits": [[269, null]], "Simulators": [[0, "simulators"]], "Single qubit measurements": [[268, null]], "Special methods": [[1, "special-methods"], [21, "special-methods"], [37, "special-methods"], [100, "special-methods"], [137, "special-methods"], [150, "special-methods"], [163, "special-methods"], [176, "special-methods"], [183, "special-methods"], [195, "special-methods"], [203, "special-methods"]], "Stabilizers": [[266, "stabilizers"]], "String representation": [[1, "string-representation"], [11, "string-representation"], [21, "string-representation"], [37, "string-representation"], [100, "string-representation"], [125, "string-representation"], [137, "string-representation"], [150, "string-representation"], [163, "string-representation"], [176, "string-representation"], [183, "string-representation"], [195, "string-representation"], [203, "string-representation"], [223, "string-representation"]], "Templates": [[0, "templates"], [267, "templates"]], "Testing and Development": [[270, "testing-and-development"]], "Utils": [[0, "utils"]], "Welcome to MentPy\u2019s documentation": [[271, null]]}, "docurls": ["api.html", "api/mentpy.BaseSimulator.html", "api/mentpy.BaseSimulator.__call__.html", "api/mentpy.BaseSimulator.__init__.html", "api/mentpy.BaseSimulator.__repr__.html", "api/mentpy.BaseSimulator.input_state.html", "api/mentpy.BaseSimulator.mbqcircuit.html", "api/mentpy.BaseSimulator.measure.html", "api/mentpy.BaseSimulator.outcomes.html", "api/mentpy.BaseSimulator.reset.html", "api/mentpy.BaseSimulator.run.html", "api/mentpy.ControlMent.html", "api/mentpy.ControlMent.__init__.html", "api/mentpy.ControlMent.__repr__.html", "api/mentpy.ControlMent.angle.html", "api/mentpy.ControlMent.condition.html", "api/mentpy.ControlMent.copy.html", "api/mentpy.ControlMent.get_povm.html", "api/mentpy.ControlMent.is_trainable.html", "api/mentpy.ControlMent.matrix.html", "api/mentpy.ControlMent.plane.html", "api/mentpy.GraphState.html", "api/mentpy.GraphState.__contains__.html", "api/mentpy.GraphState.__eq__.html", "api/mentpy.GraphState.__getitem__.html", "api/mentpy.GraphState.__init__.html", "api/mentpy.GraphState.__iter__.html", "api/mentpy.GraphState.__len__.html", "api/mentpy.GraphState.__repr__.html", "api/mentpy.GraphState.__str__.html", "api/mentpy.GraphState.add_edge.html", "api/mentpy.GraphState.add_edges_from.html", "api/mentpy.GraphState.add_node.html", "api/mentpy.GraphState.add_nodes_from.html", "api/mentpy.GraphState.add_weighted_edges_from.html", "api/mentpy.GraphState.adj.html", "api/mentpy.GraphState.adjacency.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__class_getitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__contains__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__delitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__eq__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ge__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__getattribute__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__getitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__gt__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ior__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__iter__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__le__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__len__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__lt__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ne__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__new__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__or__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__repr__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__reversed__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ror__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__setitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.clear.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.copy.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.fromkeys.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.get.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.items.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.keys.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.pop.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.popitem.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.setdefault.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.update.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.values.html", "api/mentpy.GraphState.clear.html", "api/mentpy.GraphState.clear_edges.html", "api/mentpy.GraphState.copy.html", "api/mentpy.GraphState.degree.html", "api/mentpy.GraphState.edge_subgraph.html", "api/mentpy.GraphState.edges.html", "api/mentpy.GraphState.get_edge_data.html", "api/mentpy.GraphState.has_edge.html", "api/mentpy.GraphState.has_node.html", "api/mentpy.GraphState.index_mapping.html", "api/mentpy.GraphState.is_directed.html", "api/mentpy.GraphState.is_multigraph.html", "api/mentpy.GraphState.name.html", "api/mentpy.GraphState.nbunch_iter.html", "api/mentpy.GraphState.neighbors.html", "api/mentpy.GraphState.nodes.html", "api/mentpy.GraphState.number_of_edges.html", "api/mentpy.GraphState.number_of_nodes.html", "api/mentpy.GraphState.order.html", "api/mentpy.GraphState.remove_edge.html", "api/mentpy.GraphState.remove_edges_from.html", "api/mentpy.GraphState.remove_node.html", "api/mentpy.GraphState.remove_nodes_from.html", "api/mentpy.GraphState.size.html", "api/mentpy.GraphState.stabilizers.html", "api/mentpy.GraphState.subgraph.html", "api/mentpy.GraphState.to_directed.html", "api/mentpy.GraphState.to_directed_class.html", "api/mentpy.GraphState.to_undirected.html", "api/mentpy.GraphState.to_undirected_class.html", "api/mentpy.GraphState.update.html", "api/mentpy.MBQCircuit.html", "api/mentpy.MBQCircuit.__delitem__.html", "api/mentpy.MBQCircuit.__getitem__.html", "api/mentpy.MBQCircuit.__init__.html", "api/mentpy.MBQCircuit.__len__.html", "api/mentpy.MBQCircuit.__repr__.html", "api/mentpy.MBQCircuit.__setitem__.html", "api/mentpy.MBQCircuit.add_edge.html", "api/mentpy.MBQCircuit.add_edges_from.html", "api/mentpy.MBQCircuit.calculate_order.html", "api/mentpy.MBQCircuit.classical_output_nodes.html", "api/mentpy.MBQCircuit.controlled_nodes.html", "api/mentpy.MBQCircuit.depth.html", "api/mentpy.MBQCircuit.flow.html", "api/mentpy.MBQCircuit.graph.html", "api/mentpy.MBQCircuit.input_nodes.html", "api/mentpy.MBQCircuit.inputc.html", "api/mentpy.MBQCircuit.measurement_order.html", "api/mentpy.MBQCircuit.measurements.html", "api/mentpy.MBQCircuit.ordered_layers.html", "api/mentpy.MBQCircuit.output_nodes.html", "api/mentpy.MBQCircuit.outputc.html", "api/mentpy.MBQCircuit.partial_order.html", "api/mentpy.MBQCircuit.quantum_output_nodes.html", "api/mentpy.MBQCircuit.trainable_nodes.html", "api/mentpy.Measurement.html", "api/mentpy.Measurement.__init__.html", "api/mentpy.Measurement.__repr__.html", "api/mentpy.Measurement.angle.html", "api/mentpy.Measurement.copy.html", "api/mentpy.Measurement.get_povm.html", "api/mentpy.Measurement.is_trainable.html", "api/mentpy.Measurement.matrix.html", "api/mentpy.Measurement.node_id.html", "api/mentpy.Measurement.outcome.html", "api/mentpy.Measurement.plane.html", "api/mentpy.Measurement.set_angle.html", "api/mentpy.MentOutcome.html", "api/mentpy.MentOutcome.__call__.html", "api/mentpy.MentOutcome.__eq__.html", "api/mentpy.MentOutcome.__ge__.html", "api/mentpy.MentOutcome.__gt__.html", "api/mentpy.MentOutcome.__init__.html", "api/mentpy.MentOutcome.__le__.html", "api/mentpy.MentOutcome.__lt__.html", "api/mentpy.MentOutcome.__ne__.html", "api/mentpy.MentOutcome.__or__.html", "api/mentpy.MentOutcome.__repr__.html", "api/mentpy.MentOutcome.cond_nodes.html", "api/mentpy.MentOutcome.node_id.html", "api/mentpy.NumpySimulatorDM.html", "api/mentpy.NumpySimulatorDM.__init__.html", "api/mentpy.NumpySimulatorDM.current_number_simulated_nodes.html", "api/mentpy.NumpySimulatorDM.current_simulated_nodes.html", "api/mentpy.NumpySimulatorDM.find_swaps.html", "api/mentpy.NumpySimulatorDM.future_neighbors_in_wire.html", "api/mentpy.NumpySimulatorDM.measure.html", "api/mentpy.NumpySimulatorDM.measure_ment.html", "api/mentpy.NumpySimulatorDM.neighbors_in_wire.html", "api/mentpy.NumpySimulatorDM.node_in_which_wire.html", "api/mentpy.NumpySimulatorDM.reorder_qubits.html", "api/mentpy.NumpySimulatorDM.reset.html", "api/mentpy.NumpySimulatorDM.run.html", "api/mentpy.NumpySimulatorSV.html", "api/mentpy.NumpySimulatorSV.__init__.html", "api/mentpy.NumpySimulatorSV.current_number_simulated_nodes.html", "api/mentpy.NumpySimulatorSV.current_simulated_nodes.html", "api/mentpy.NumpySimulatorSV.find_swaps.html", "api/mentpy.NumpySimulatorSV.future_neighbors_in_wire.html", "api/mentpy.NumpySimulatorSV.measure.html", "api/mentpy.NumpySimulatorSV.measure_ment.html", "api/mentpy.NumpySimulatorSV.neighbors_in_wire.html", "api/mentpy.NumpySimulatorSV.node_in_which_wire.html", "api/mentpy.NumpySimulatorSV.reorder_qubits.html", "api/mentpy.NumpySimulatorSV.reset.html", "api/mentpy.NumpySimulatorSV.run.html", "api/mentpy.PatternSimulator.html", "api/mentpy.PatternSimulator.__call__.html", "api/mentpy.PatternSimulator.__init__.html", "api/mentpy.PatternSimulator.__repr__.html", "api/mentpy.PatternSimulator.measure.html", "api/mentpy.PatternSimulator.reset.html", "api/mentpy.PatternSimulator.run.html", "api/mentpy.PauliOp.html", "api/mentpy.PauliOp.__eq__.html", "api/mentpy.PauliOp.__getitem__.html", "api/mentpy.PauliOp.__hash__.html", "api/mentpy.PauliOp.__init__.html", "api/mentpy.PauliOp.__mul__.html", "api/mentpy.PauliOp.__repr__.html", "api/mentpy.PauliOp.append.html", "api/mentpy.PauliOp.commutator.html", "api/mentpy.PauliOp.get_subset.html", "api/mentpy.PauliOp.number_of_qubits.html", "api/mentpy.PauliOp.symplectic_prod.html", "api/mentpy.PennylaneSimulator.html", "api/mentpy.PennylaneSimulator.__init__.html", "api/mentpy.PennylaneSimulator.measure.html", "api/mentpy.PennylaneSimulator.reset.html", "api/mentpy.PennylaneSimulator.run.html", "api/mentpy.draw.html", "api/mentpy.draw_with_wires.html", "api/mentpy.hstack.html", "api/mentpy.mbqc.flow.Flow.html", "api/mentpy.mbqc.flow.Flow.__call__.html", "api/mentpy.mbqc.flow.Flow.__init__.html", "api/mentpy.mbqc.flow.Flow.__repr__.html", "api/mentpy.mbqc.flow.Flow.adapt_angle.html", "api/mentpy.mbqc.flow.Flow.adapt_angles.html", "api/mentpy.mbqc.flow.Flow.correction_op.html", "api/mentpy.mbqc.flow.Flow.generator_op.html", "api/mentpy.mbqc.flow.Flow.initialize_flow.html", "api/mentpy.mbqc.flow.find_cflow.html", "api/mentpy.mbqc.flow.find_gflow.html", "api/mentpy.mbqc.flow.find_pflow.html", "api/mentpy.mbqc.flow.odd_neighborhood.html", "api/mentpy.mbqc.templates.from_pauli.html", "api/mentpy.mbqc.templates.grid_cluster.html", "api/mentpy.mbqc.templates.linear_cluster.html", "api/mentpy.mbqc.templates.many_wires.html", "api/mentpy.mbqc.templates.muta.html", "api/mentpy.merge.html", "api/mentpy.parse_version.html", "api/mentpy.utils.FlowSpace.html", "api/mentpy.utils.FlowSpace.__init__.html", "api/mentpy.utils.FlowSpace.__repr__.html", "api/mentpy.utils.are_lc_equivalent.html", "api/mentpy.utils.calculate_complete_gens.html", "api/mentpy.utils.calculate_gens.html", "api/mentpy.utils.calculate_lie_algebra.html", "api/mentpy.utils.calculate_ordered_gens.html", "api/mentpy.utils.digraph_expressivity_of_flow_space.html", "api/mentpy.utils.dim_so.html", "api/mentpy.utils.dim_sp.html", "api/mentpy.utils.dim_su.html", "api/mentpy.utils.draw_digraph_flow_space.html", "api/mentpy.utils.expressivity_with_histogram.html", "api/mentpy.utils.generate_haar_random_states.html", "api/mentpy.utils.generate_random_dataset.html", "api/mentpy.utils.generate_random_dataset_noisy.html", "api/mentpy.utils.lc_cluster_flowspace.html", "api/mentpy.utils.lie_algebra_completion.html", "api/mentpy.utils.sample_probability_density_of_fidelities.html", "api/mentpy.utils.train_test_split.html", "api/mentpy.vstack.html", "api/mentpy/optimizers.AdamOpt.html", "api/mentpy/optimizers.AdamOpt.__init__.html", "api/mentpy/optimizers.AdamOpt.optimize.html", "api/mentpy/optimizers.AdamOpt.optimize_and_gradient_norm.html", "api/mentpy/optimizers.AdamOpt.reset.html", "api/mentpy/optimizers.AdamOpt.step.html", "api/mentpy/optimizers.AdamOpt.update_step_size.html", "api/mentpy/optimizers.RCDOpt.html", "api/mentpy/optimizers.RCDOpt.__init__.html", "api/mentpy/optimizers.RCDOpt.optimize.html", "api/mentpy/optimizers.RCDOpt.optimize_and_gradient_norm.html", "api/mentpy/optimizers.RCDOpt.reset.html", "api/mentpy/optimizers.RCDOpt.step.html", "api/mentpy/optimizers.RCDOpt.update_step_size.html", "api/mentpy/optimizers.SGDOpt.html", "api/mentpy/optimizers.SGDOpt.__init__.html", "api/mentpy/optimizers.SGDOpt.optimize.html", "api/mentpy/optimizers.SGDOpt.optimize_and_gradient_norm.html", "api/mentpy/optimizers.SGDOpt.reset.html", "api/mentpy/optimizers.SGDOpt.step.html", "api/mentpy/optimizers.SGDOpt.update_step_size.html", "basic-usage/intro-to-graphstates.html", "basic-usage/intro-to-mbqc.html", "basic-usage/measurements-in-qm.html", "basic-usage/simulating-mbqc-circuits.html", "getting-started.html", "index.html", "tutorials/classify-classical-data.html", "tutorials/classify-fisher.html", "tutorials/hea-discrete.html", "tutorials/intro-mb-vqe.html", "tutorials/intro-to-mbqml.html", "tutorials/intro-to-mbqml-parallel.html", "tutorials/learn-instrument.html"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2}, "indexentries": {"mentpy": [[0, "module-mentpy", false]], "module": [[0, "module-mentpy", false]]}, "objects": {"": [[0, 0, 0, 1, "mentpy", ""]], "mentpy": [[1, 1, 1, "", "BaseSimulator", "Base class for simulators."], [11, 1, 1, "", "ControlMent", "Controlled measurement operator."], [21, 1, 1, "", "GraphState", "A graph state class that inherits from networkx.Graph."], [100, 1, 1, "", "MBQCircuit", "The MBQCircuit class that deals with operations and manipulations of graph states"], [125, 5, 1, "", "Measurement", "alias of Ment"], [137, 1, 1, "", "MentOutcome", "Measurement outcome class."], [150, 1, 1, "", "NumpySimulatorDM", "A density matrix simulator that uses numpy to simulate the quantum circuit."], [163, 1, 1, "", "NumpySimulatorSV", "A vector state simulator that uses numpy to simulate the quantum circuit."], [176, 1, 1, "", "PatternSimulator", "Simulator for measuring patterns of MBQC circuits."], [183, 1, 1, "", "PauliOp", "Class for representing Pauli operators as matrices and strings."], [195, 1, 1, "", "PennylaneSimulator", "Simulator for measuring patterns of MBQC circuits."], [200, 6, 1, "", "draw", "Draws mbqc circuit with flow."], [201, 6, 1, "", "draw_with_wires", "Draws mbqc circuit with flow."], [202, 6, 1, "", "hstack", "Horizontally stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."], [221, 6, 1, "", "merge", "Merge two MBQC circuits into a larger MBQC circuit. This is, the input and output of the new MBQC circuit will depend on the concat_indices."], [222, 6, 1, "", "parse_version", "Parse the given version string."], [244, 6, 1, "", "vstack", "Vertically stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."]], "mentpy.BaseSimulator": [[2, 2, 1, "", "__call__", "Call self as a function."], [3, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [4, 2, 1, "", "__repr__", "Return repr(self)."], [5, 4, 1, "", "input_state", "The input state of the simulator."], [6, 4, 1, "", "mbqcircuit", "The MBQC circuit used for the simulation."], [7, 2, 1, "", "measure", "Measures the state of the system."], [8, 4, 1, "", "outcomes", "The outcomes of the simulation."], [9, 2, 1, "", "reset", "Resets the simulator to the initial state."], [10, 2, 1, "", "run", "Measures the state of the system."]], "mentpy.BaseSimulator.__call__": [[2, 3, 2, "", "angles", "Call self as a function."], [2, 3, 2, "", "kwargs", "Call self as a function."]], "mentpy.BaseSimulator.__init__": [[3, 3, 2, "", "input_state", "Initialize self.  See help(type(self)) for accurate signature."], [3, 3, 2, "", "mbqcircuit", "Initialize self.  See help(type(self)) for accurate signature."]], "mentpy.BaseSimulator.measure": [[7, 3, 2, "p-angle", "angle", "The angle of measurement."], [7, 3, 2, "", "kwargs", "Measures the state of the system."]], "mentpy.BaseSimulator.reset": [[9, 3, 2, "", "input_state", "Resets the simulator to the initial state."]], "mentpy.BaseSimulator.run": [[10, 3, 2, "p-angles", "angles", "The parameters of the MBQC circuit (if any)."], [10, 3, 2, "", "kwargs", "Measures the state of the system."]], "mentpy.ControlMent": [[12, 2, 1, "", "__init__", "Controlled measurement operator."], [13, 2, 1, "", "__repr__", "Return repr(self)."], [14, 2, 1, "", "angle", ""], [15, 4, 1, "", "condition", ""], [16, 2, 1, "", "copy", "Returns a copy of the measurement."], [17, 2, 1, "", "get_povm", "Returns the POVM representation of the measurement."], [18, 2, 1, "", "is_trainable", "Returns True if the measurement is trainable."], [19, 2, 1, "", "matrix", "Return the matrix of the controlled measurement operator."], [20, 2, 1, "", "plane", ""]], "mentpy.ControlMent.__init__": [[12, 3, 2, "", "condition", "Controlled measurement operator."], [12, 3, 2, "", "false_angle", "Controlled measurement operator."], [12, 3, 2, "", "false_plane", "Controlled measurement operator."], [12, 3, 2, "", "true_angle", "Controlled measurement operator."], [12, 3, 2, "", "true_plane", "Controlled measurement operator."]], "mentpy.ControlMent.angle": [[14, 3, 2, "", "args", ""], [14, 3, 2, "", "kwargs", ""]], "mentpy.ControlMent.get_povm": [[17, 3, 2, "", "angle", "Returns the POVM representation of the measurement."], [17, 3, 2, "", "args", "Returns the POVM representation of the measurement."], [17, 3, 2, "", "kwargs", "Returns the POVM representation of the measurement."]], "mentpy.ControlMent.matrix": [[19, 3, 2, "", "angle", "Return the matrix of the controlled measurement operator."], [19, 3, 2, "", "args", "Return the matrix of the controlled measurement operator."], [19, 3, 2, "", "kwargs", "Return the matrix of the controlled measurement operator."]], "mentpy.ControlMent.plane": [[20, 3, 2, "", "args", ""], [20, 3, 2, "", "kwargs", ""]], "mentpy.GraphState": [[22, 2, 1, "", "__contains__", "Returns True if n is a node, False otherwise. Use: 'n in G'."], [23, 2, 1, "", "__eq__", "Return self==value."], [24, 2, 1, "", "__getitem__", "Returns a dict of neighbors of node n.  Use: 'G[n]'."], [25, 2, 1, "", "__init__", "Initialize a graph state. See networkx.Graph for more information."], [26, 2, 1, "", "__iter__", "Iterate over the nodes. Use: 'for n in G'."], [27, 2, 1, "", "__len__", "Returns the number of nodes in the graph. Use: 'len(G)'."], [28, 2, 1, "", "__repr__", "Return repr(self)."], [29, 2, 1, "", "__str__", "Returns a short summary of the graph."], [30, 2, 1, "", "add_edge", "Add an edge between u and v."], [31, 2, 1, "", "add_edges_from", "Add all the edges in ebunch_to_add."], [32, 2, 1, "", "add_node", "Add a single node node_for_adding and update node attributes."], [33, 2, 1, "", "add_nodes_from", "Add multiple nodes."], [34, 2, 1, "", "add_weighted_edges_from", "Add weighted edges in ebunch_to_add with specified weight attr"], [35, 4, 1, "", "adj", "Graph adjacency object holding the neighbors of each node."], [36, 2, 1, "", "adjacency", "Returns an iterator over (node, adjacency dict) tuples for all nodes."], [37, 5, 1, "", "adjlist_inner_dict_factory", "alias of dict"], [69, 2, 1, "", "clear", "Remove all nodes and edges from the graph."], [70, 2, 1, "", "clear_edges", "Remove all edges from the graph without altering nodes."], [71, 2, 1, "", "copy", "Returns a copy of the graph."], [72, 4, 1, "", "degree", "A DegreeView for the Graph as G.degree or G.degree()."], [73, 2, 1, "", "edge_subgraph", "Returns the subgraph induced by the specified edges."], [74, 4, 1, "", "edges", "An EdgeView of the Graph as G.edges or G.edges()."], [75, 2, 1, "", "get_edge_data", "Returns the attribute dictionary associated with edge (u, v)."], [76, 2, 1, "", "has_edge", "Returns True if the edge (u, v) is in the graph."], [77, 2, 1, "", "has_node", "Returns True if the graph contains the node n."], [78, 2, 1, "", "index_mapping", "Return a mapping of the nodes to their indices."], [79, 2, 1, "", "is_directed", "Returns True if graph is directed, False otherwise."], [80, 2, 1, "", "is_multigraph", "Returns True if graph is a multigraph, False otherwise."], [81, 4, 1, "", "name", "String identifier of the graph."], [82, 2, 1, "", "nbunch_iter", "Returns an iterator over nodes contained in nbunch that are also in the graph."], [83, 2, 1, "", "neighbors", "Returns an iterator over all neighbors of node n."], [84, 4, 1, "", "nodes", "A NodeView of the Graph as G.nodes or G.nodes()."], [85, 2, 1, "", "number_of_edges", "Returns the number of edges between two nodes."], [86, 2, 1, "", "number_of_nodes", "Returns the number of nodes in the graph."], [87, 2, 1, "", "order", "Returns the number of nodes in the graph."], [88, 2, 1, "", "remove_edge", "Remove the edge between u and v."], [89, 2, 1, "", "remove_edges_from", "Remove all edges specified in ebunch."], [90, 2, 1, "", "remove_node", "Remove node n."], [91, 2, 1, "", "remove_nodes_from", "Remove multiple nodes."], [92, 2, 1, "", "size", "Returns the number of edges or total of all edge weights."], [93, 2, 1, "", "stabilizers", "Generate the stabilizers of a graph state."], [94, 2, 1, "", "subgraph", "Returns a SubGraph view of the subgraph induced on nodes."], [95, 2, 1, "", "to_directed", "Returns a directed representation of the graph."], [96, 2, 1, "", "to_directed_class", "Returns the class to use for empty directed copies."], [97, 2, 1, "", "to_undirected", "Returns an undirected copy of the graph."], [98, 2, 1, "", "to_undirected_class", "Returns the class to use for empty undirected copies."], [99, 2, 1, "", "update", "Update the graph using nodes/edges/graphs as input."]], "mentpy.GraphState.__contains__": [[22, 3, 2, "", "n", "Returns True if n is a node, False otherwise. Use: 'n in G'."]], "mentpy.GraphState.__eq__": [[23, 3, 2, "", "other", "Return self==value."]], "mentpy.GraphState.__getitem__": [[24, 3, 2, "p-n", "n", "A node in the graph."]], "mentpy.GraphState.__init__": [[25, 3, 2, "", "args", "Initialize a graph state. See networkx.Graph for more information."], [25, 3, 2, "", "kwargs", "Initialize a graph state. See networkx.Graph for more information."]], "mentpy.GraphState.add_edge": [[30, 3, 2, "p-attr", "attr", "Edge data (or labels or objects) can be assigned using keyword arguments."], [30, 3, 2, "p-u_of_edge", "u_of_edge", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."], [30, 3, 2, "p-v_of_edge", "v_of_edge", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."]], "mentpy.GraphState.add_edges_from": [[31, 3, 2, "p-attr", "attr", "Edge data (or labels or objects) can be assigned using keyword arguments."], [31, 3, 2, "p-ebunch_to_add", "ebunch_to_add", "Each edge given in the container will be added to the graph."]], "mentpy.GraphState.add_node": [[32, 3, 2, "p-attr", "attr", "Set or change node attributes using key=value."], [32, 3, 2, "p-node_for_adding", "node_for_adding", "A node can be any hashable Python object except None."]], "mentpy.GraphState.add_nodes_from": [[33, 3, 2, "p-attr", "attr", "Update attributes for all nodes in nodes. Node attributes specified in nodes as a tuple take precedence over attributes specified via keyword arguments."], [33, 3, 2, "p-nodes_for_adding", "nodes_for_adding", "A container of nodes (list, dict, set, etc.). OR A container of (node, attribute dict) tuples. Node attributes are updated using the attribute dict."]], "mentpy.GraphState.add_weighted_edges_from": [[34, 3, 2, "p-attr", "attr", "Edge attributes to add/update for all edges."], [34, 3, 2, "p-ebunch_to_add", "ebunch_to_add", "Each edge given in the list or container will be added to the graph."], [34, 3, 2, "p-weight", "weight", "The attribute name for the edge weights to be added."]], "mentpy.GraphState.adjlist_inner_dict_factory": [[38, 2, 1, "", "__class_getitem__", "See PEP 585"], [39, 2, 1, "", "__contains__", "True if the dictionary has the specified key, else False."], [40, 2, 1, "", "__delitem__", "Delete self[key]."], [41, 2, 1, "", "__eq__", "Return self==value."], [42, 2, 1, "", "__ge__", "Return self>=value."], [43, 2, 1, "", "__getattribute__", "Return getattr(self, name)."], [44, 2, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [45, 2, 1, "", "__gt__", "Return self>value."], [46, 2, 1, "", "__ior__", "Return self|=value."], [47, 2, 1, "", "__iter__", "Implement iter(self)."], [48, 2, 1, "", "__le__", "Return self<=value."], [49, 2, 1, "", "__len__", "Return len(self)."], [50, 2, 1, "", "__lt__", "Return self<value."], [51, 2, 1, "", "__ne__", "Return self!=value."], [52, 2, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [53, 2, 1, "", "__or__", "Return self|value."], [54, 2, 1, "", "__repr__", "Return repr(self)."], [55, 2, 1, "", "__reversed__", "Return a reverse iterator over the dict keys."], [56, 2, 1, "", "__ror__", "Return value|self."], [57, 2, 1, "", "__setitem__", "Set self[key] to value."], [58, 2, 1, "", "clear", ""], [59, 2, 1, "", "copy", ""], [60, 2, 1, "", "fromkeys", "Create a new dictionary with keys from iterable and values set to value."], [61, 2, 1, "", "get", "Return the value for key if key is in the dictionary, else default."], [62, 2, 1, "", "items", ""], [63, 2, 1, "", "keys", ""], [64, 2, 1, "", "pop", "If the key is not found, return the default if given; otherwise, raise a KeyError."], [65, 2, 1, "", "popitem", "Remove and return a (key, value) pair as a 2-tuple."], [66, 2, 1, "", "setdefault", "Insert key with a value of default if key is not in the dictionary."], [67, 2, 1, "", "update", "If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"], [68, 2, 1, "", "values", ""]], "mentpy.GraphState.adjlist_inner_dict_factory.__contains__": [[39, 3, 2, "", "key", "True if the dictionary has the specified key, else False."]], "mentpy.GraphState.adjlist_inner_dict_factory.__delitem__": [[40, 3, 2, "", "key", "Delete self[key]."]], "mentpy.GraphState.adjlist_inner_dict_factory.__eq__": [[41, 3, 2, "", "value", "Return self==value."]], "mentpy.GraphState.adjlist_inner_dict_factory.__ge__": [[42, 3, 2, "", "value", "Return self>=value."]], "mentpy.GraphState.adjlist_inner_dict_factory.__getattribute__": [[43, 3, 2, "", "name", "Return getattr(self, name)."]], "mentpy.GraphState.adjlist_inner_dict_factory.__gt__": [[45, 3, 2, "", "value", "Return self>value."]], "mentpy.GraphState.adjlist_inner_dict_factory.__ior__": [[46, 3, 2, "", "value", "Return self|=value."]], "mentpy.GraphState.adjlist_inner_dict_factory.__le__": [[48, 3, 2, "", "value", "Return self<=value."]], "mentpy.GraphState.adjlist_inner_dict_factory.__lt__": [[50, 3, 2, "", "value", "Return self<value."]], "mentpy.GraphState.adjlist_inner_dict_factory.__ne__": [[51, 3, 2, "", "value", "Return self!=value."]], "mentpy.GraphState.adjlist_inner_dict_factory.__new__": [[52, 3, 2, "", "kwargs", "Create and return a new object.  See help(type) for accurate signature."]], "mentpy.GraphState.adjlist_inner_dict_factory.__or__": [[53, 3, 2, "", "value", "Return self|value."]], "mentpy.GraphState.adjlist_inner_dict_factory.__ror__": [[56, 3, 2, "", "value", "Return value|self."]], "mentpy.GraphState.adjlist_inner_dict_factory.__setitem__": [[57, 3, 2, "", "key", "Set self[key] to value."], [57, 3, 2, "", "value", "Set self[key] to value."]], "mentpy.GraphState.adjlist_inner_dict_factory.fromkeys": [[60, 3, 2, "", "value", "Create a new dictionary with keys from iterable and values set to value."]], "mentpy.GraphState.adjlist_inner_dict_factory.get": [[61, 3, 2, "", "default", "Return the value for key if key is in the dictionary, else default."], [61, 3, 2, "", "key", "Return the value for key if key is in the dictionary, else default."]], "mentpy.GraphState.adjlist_inner_dict_factory.pop": [[64, 3, 2, "", "d", "If the key is not found, return the default if given; otherwise, raise a KeyError."], [64, 3, 2, "", "k", "If the key is not found, return the default if given; otherwise, raise a KeyError."]], "mentpy.GraphState.adjlist_inner_dict_factory.setdefault": [[66, 3, 2, "", "default", "Insert key with a value of default if key is not in the dictionary."], [66, 3, 2, "", "key", "Insert key with a value of default if key is not in the dictionary."]], "mentpy.GraphState.adjlist_inner_dict_factory.update": [[67, 3, 2, "", "**F", "If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"], [67, 3, 2, "", "E", "If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"]], "mentpy.GraphState.copy": [[71, 3, 2, "p-as_view", "as_view", "If True, the returned graph-view provides a read-only view of the original graph without actually copying any data."]], "mentpy.GraphState.edge_subgraph": [[73, 3, 2, "p-edges", "edges", "An iterable of edges in this graph."]], "mentpy.GraphState.get_edge_data": [[75, 3, 2, "p-default", "default", "Value to return if the edge (u, v) is not found."], [75, 3, 2, "p-u", "u", ""], [75, 3, 2, "p-v", "v", ""]], "mentpy.GraphState.has_edge": [[76, 3, 2, "p-u", "u", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."], [76, 3, 2, "p-v", "v", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."]], "mentpy.GraphState.has_node": [[77, 3, 2, "p-n", "n", ""]], "mentpy.GraphState.nbunch_iter": [[82, 3, 2, "p-nbunch", "nbunch", "The view will only report edges incident to these nodes."]], "mentpy.GraphState.neighbors": [[83, 3, 2, "p-n", "n", "A node in the graph"]], "mentpy.GraphState.number_of_edges": [[85, 3, 2, "p-u", "u", "If u and v are specified, return the number of edges between u and v."], [85, 3, 2, "p-v", "v", "If u and v are specified, return the number of edges between u and v."]], "mentpy.GraphState.remove_edge": [[88, 3, 2, "p-u", "u", "Remove the edge between nodes u and v."], [88, 3, 2, "p-v", "v", "Remove the edge between nodes u and v."]], "mentpy.GraphState.remove_edges_from": [[89, 3, 2, "p-ebunch", "ebunch", "Each edge given in the list or container will be removed from the graph."]], "mentpy.GraphState.remove_node": [[90, 3, 2, "p-n", "n", "A node in the graph"]], "mentpy.GraphState.remove_nodes_from": [[91, 3, 2, "p-nodes", "nodes", "A container of nodes (list, dict, set, etc.)."]], "mentpy.GraphState.size": [[92, 3, 2, "p-weight", "weight", "The edge attribute that holds the numerical value used as a weight."]], "mentpy.GraphState.subgraph": [[94, 3, 2, "p-nodes", "nodes", "A container of nodes which will be iterated through once."]], "mentpy.GraphState.to_directed": [[95, 3, 2, "", "as_view", "Returns a directed representation of the graph."]], "mentpy.GraphState.to_undirected": [[97, 3, 2, "p-as_view", "as_view", "If True return a view of the original undirected graph."]], "mentpy.GraphState.update": [[99, 3, 2, "p-edges", "edges", "The first parameter can be a graph or some edges."], [99, 3, 2, "p-nodes", "nodes", "The second parameter is treated as a collection of nodes to be added to the graph unless it is None. If edges is None and nodes is None an exception is raised. If the first parameter is a Graph, then nodes is ignored."]], "mentpy.MBQCircuit": [[101, 2, 1, "", "__delitem__", "Delete the measurement of the node with index key."], [102, 2, 1, "", "__getitem__", "Return the value of the measurement of the node with index key."], [103, 2, 1, "", "__init__", "Initializes a graph state"], [104, 2, 1, "", "__len__", "Return the number of nodes in the MBQCircuit"], [105, 2, 1, "", "__repr__", "Return the representation of the current MBQC circuit state"], [106, 2, 1, "", "__setitem__", "Set the value of the measurement of the node with index key."], [107, 2, 1, "", "add_edge", "Adds an edge between nodes u and v"], [108, 2, 1, "", "add_edges_from", "Adds edges from a list of tuples"], [109, 2, 1, "", "calculate_order", "Returns the order of the measurements"], [110, 4, 1, "", "classical_output_nodes", "Return the output nodes of the MBQC circuit."], [111, 4, 1, "", "controlled_nodes", "Return the controlled nodes of the MBQC circuit."], [112, 4, 1, "", "depth", "Return the depth of the MBQC circuit."], [113, 4, 1, "", "flow", "Return the flow function of the MBQC circuit."], [114, 4, 1, "", "graph", "Return the graph of the resource state."], [115, 4, 1, "", "input_nodes", "Return the input nodes of the MBQC circuit."], [116, 4, 1, "", "inputc", "Returns I^c, the complement of input nodes."], [117, 4, 1, "", "measurement_order", "Return the measurement order of the MBQC circuit."], [118, 4, 1, "", "measurements", "Return the measurements of the MBQC circuit."], [119, 2, 1, "", "ordered_layers", "Returns the layers of the MBQC circuit."], [120, 4, 1, "", "output_nodes", "Return the output nodes of the MBQC circuit."], [121, 4, 1, "", "outputc", "Returns O^c, the complement of output nodes."], [122, 4, 1, "", "partial_order", "Return the partial order function of the MBQC circuit."], [123, 4, 1, "", "quantum_output_nodes", "Return the output nodes of the MBQC circuit."], [124, 4, 1, "", "trainable_nodes", "Return the trainable nodes of the MBQC circuit."]], "mentpy.MBQCircuit.__delitem__": [[101, 3, 2, "", "key", "Delete the measurement of the node with index key."]], "mentpy.MBQCircuit.__getitem__": [[102, 3, 2, "", "key", "Return the value of the measurement of the node with index key."]], "mentpy.MBQCircuit.__init__": [[103, 3, 2, "", "default_measurement", "Initializes a graph state"], [103, 3, 2, "", "graph", "Initializes a graph state"], [103, 3, 2, "", "input_nodes", "Initializes a graph state"], [103, 3, 2, "", "measurements", "Initializes a graph state"], [103, 3, 2, "", "output_nodes", "Initializes a graph state"], [103, 3, 2, "", "relabel_indices", "Initializes a graph state"]], "mentpy.MBQCircuit.__setitem__": [[106, 3, 2, "", "key", "Set the value of the measurement of the node with index key."], [106, 3, 2, "", "value", "Set the value of the measurement of the node with index key."]], "mentpy.MBQCircuit.add_edge": [[107, 3, 2, "", "u", "Adds an edge between nodes u and v"], [107, 3, 2, "", "v", "Adds an edge between nodes u and v"]], "mentpy.MBQCircuit.add_edges_from": [[108, 3, 2, "", "edges", "Adds edges from a list of tuples"], [108, 3, 2, "", "kwargs", "Adds edges from a list of tuples"]], "mentpy.MBQCircuit.ordered_layers": [[119, 3, 2, "", "train_indices", "Returns the layers of the MBQC circuit."]], "mentpy.Measurement": [[126, 2, 1, "", "__init__", "Measurement operator."], [127, 2, 1, "", "__repr__", "Return repr(self)."], [128, 4, 1, "", "angle", ""], [129, 2, 1, "", "copy", "Returns a copy of the measurement."], [130, 2, 1, "", "get_povm", "Returns the POVM representation of the measurement."], [131, 2, 1, "", "is_trainable", "Returns True if the measurement is trainable."], [132, 2, 1, "", "matrix", "Returns the matrix representation of the measurement."], [133, 4, 1, "", "node_id", ""], [134, 4, 1, "", "outcome", ""], [135, 4, 1, "", "plane", ""], [136, 2, 1, "", "set_angle", "Sets the angle of the measurement."]], "mentpy.Measurement.__init__": [[126, 3, 2, "", "angle", "Measurement operator."], [126, 3, 2, "", "plane", "Measurement operator."]], "mentpy.Measurement.get_povm": [[130, 3, 2, "", "angle", "Returns the POVM representation of the measurement."], [130, 3, 2, "", "args", "Returns the POVM representation of the measurement."], [130, 3, 2, "", "kwargs", "Returns the POVM representation of the measurement."]], "mentpy.Measurement.matrix": [[132, 3, 2, "", "angle", "Returns the matrix representation of the measurement."], [132, 3, 2, "", "args", "Returns the matrix representation of the measurement."], [132, 3, 2, "", "kwargs", "Returns the matrix representation of the measurement."]], "mentpy.Measurement.set_angle": [[136, 3, 2, "", "angle", "Sets the angle of the measurement."]], "mentpy.MentOutcome": [[138, 2, 1, "", "__call__", "Call self as a function."], [139, 2, 1, "", "__eq__", "Return self==value."], [140, 2, 1, "", "__ge__", "Return self>=value."], [141, 2, 1, "", "__gt__", "Return self>value."], [142, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [143, 2, 1, "", "__le__", "Return self<=value."], [144, 2, 1, "", "__lt__", "Return self<value."], [145, 2, 1, "", "__ne__", "Return self!=value."], [146, 2, 1, "", "__or__", "Return self|value."], [147, 2, 1, "", "__repr__", "Return repr(self)."], [148, 4, 1, "", "cond_nodes", ""], [149, 4, 1, "", "node_id", ""]], "mentpy.MentOutcome.__call__": [[138, 3, 2, "", "args", "Call self as a function."], [138, 3, 2, "", "kwargs", "Call self as a function."]], "mentpy.MentOutcome.__eq__": [[139, 3, 2, "", "other", "Return self==value."]], "mentpy.MentOutcome.__ge__": [[140, 3, 2, "", "other", "Return self>=value."]], "mentpy.MentOutcome.__gt__": [[141, 3, 2, "", "other", "Return self>value."]], "mentpy.MentOutcome.__init__": [[142, 3, 2, "", "cond_nodes", "Initialize self.  See help(type(self)) for accurate signature."], [142, 3, 2, "", "node_id", "Initialize self.  See help(type(self)) for accurate signature."], [142, 3, 2, "", "outcome", "Initialize self.  See help(type(self)) for accurate signature."]], "mentpy.MentOutcome.__le__": [[143, 3, 2, "", "other", "Return self<=value."]], "mentpy.MentOutcome.__lt__": [[144, 3, 2, "", "other", "Return self<value."]], "mentpy.MentOutcome.__ne__": [[145, 3, 2, "", "other", "Return self!=value."]], "mentpy.MentOutcome.__or__": [[146, 3, 2, "", "other", "Return self|value."]], "mentpy.NumpySimulatorDM": [[151, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [152, 2, 1, "", "current_number_simulated_nodes", "Returns the number of nodes that are currently simulated."], [153, 2, 1, "", "current_simulated_nodes", "Returns the nodes that are currently simulated."], [154, 2, 1, "", "find_swaps", ""], [155, 2, 1, "", "future_neighbors_in_wire", ""], [156, 2, 1, "", "measure", "Measures the state of the system."], [157, 2, 1, "", "measure_ment", "Measures a ment"], [158, 2, 1, "", "neighbors_in_wire", "Returns the neighbors of a node in the same wire."], [159, 2, 1, "", "node_in_which_wire", "Returns the wire in which the node is."], [160, 2, 1, "", "reorder_qubits", "Reorders the qubits in the given order."], [161, 2, 1, "", "reset", "Resets the simulator to the initial state."], [162, 2, 1, "", "run", "Measures the quantum state in the given pattern."]], "mentpy.NumpySimulatorDM.__init__": [[151, 3, 2, "", "input_state", "Initialize self.  See help(type(self)) for accurate signature."], [151, 3, 2, "", "kwargs", "Initialize self.  See help(type(self)) for accurate signature."], [151, 3, 2, "", "mbqcircuit", "Initialize self.  See help(type(self)) for accurate signature."]], "mentpy.NumpySimulatorDM.find_swaps": [[154, 3, 2, "", "source", ""], [154, 3, 2, "", "target", ""]], "mentpy.NumpySimulatorDM.future_neighbors_in_wire": [[155, 3, 2, "", "node", ""]], "mentpy.NumpySimulatorDM.measure": [[156, 3, 2, "p-angle", "angle", "The angle of measurement."], [156, 3, 2, "", "mode", "Measures the state of the system."]], "mentpy.NumpySimulatorDM.measure_ment": [[157, 3, 2, "", "angle", "Measures a ment"], [157, 3, 2, "", "force0", "Measures a ment"], [157, 3, 2, "", "i", "Measures a ment"], [157, 3, 2, "", "ment", "Measures a ment"], [157, 3, 2, "", "mode", "Measures a ment"]], "mentpy.NumpySimulatorDM.neighbors_in_wire": [[158, 3, 2, "", "node", "Returns the neighbors of a node in the same wire."]], "mentpy.NumpySimulatorDM.node_in_which_wire": [[159, 3, 2, "", "node", "Returns the wire in which the node is."]], "mentpy.NumpySimulatorDM.reorder_qubits": [[160, 3, 2, "", "current_order", "Reorders the qubits in the given order."], [160, 3, 2, "", "state", "Reorders the qubits in the given order."], [160, 3, 2, "", "target_order", "Reorders the qubits in the given order."]], "mentpy.NumpySimulatorDM.reset": [[161, 3, 2, "", "input_state", "Resets the simulator to the initial state."]], "mentpy.NumpySimulatorDM.run": [[162, 3, 2, "", "angles", "Measures the quantum state in the given pattern."], [162, 3, 2, "", "input_state", "Measures the quantum state in the given pattern."], [162, 3, 2, "", "mode", "Measures the quantum state in the given pattern."]], "mentpy.NumpySimulatorSV": [[164, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [165, 2, 1, "", "current_number_simulated_nodes", "Returns the number of nodes that are currently simulated."], [166, 2, 1, "", "current_simulated_nodes", "Returns the nodes that are currently simulated."], [167, 2, 1, "", "find_swaps", ""], [168, 2, 1, "", "future_neighbors_in_wire", ""], [169, 2, 1, "", "measure", "Measures the state of the system."], [170, 2, 1, "", "measure_ment", "Measures a ment"], [171, 2, 1, "", "neighbors_in_wire", "Returns the neighbors of a node in the same wire."], [172, 2, 1, "", "node_in_which_wire", "Returns the wire in which the node is."], [173, 2, 1, "", "reorder_qubits", "Reorders the qubits in the given order."], [174, 2, 1, "", "reset", "Resets the simulator to the initial state."], [175, 2, 1, "", "run", "Measures the quantum state in the given pattern."]], "mentpy.NumpySimulatorSV.__init__": [[164, 3, 2, "", "input_state", "Initialize self.  See help(type(self)) for accurate signature."], [164, 3, 2, "", "kwargs", "Initialize self.  See help(type(self)) for accurate signature."], [164, 3, 2, "", "mbqcircuit", "Initialize self.  See help(type(self)) for accurate signature."]], "mentpy.NumpySimulatorSV.find_swaps": [[167, 3, 2, "", "source", ""], [167, 3, 2, "", "target", ""]], "mentpy.NumpySimulatorSV.future_neighbors_in_wire": [[168, 3, 2, "", "node", ""]], "mentpy.NumpySimulatorSV.measure": [[169, 3, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.NumpySimulatorSV.measure_ment": [[170, 3, 2, "", "angle", "Measures a ment"], [170, 3, 2, "", "force0", "Measures a ment"], [170, 3, 2, "", "i", "Measures a ment"], [170, 3, 2, "", "ment", "Measures a ment"]], "mentpy.NumpySimulatorSV.neighbors_in_wire": [[171, 3, 2, "", "node", "Returns the neighbors of a node in the same wire."]], "mentpy.NumpySimulatorSV.node_in_which_wire": [[172, 3, 2, "", "node", "Returns the wire in which the node is."]], "mentpy.NumpySimulatorSV.reorder_qubits": [[173, 3, 2, "", "current_order", "Reorders the qubits in the given order."], [173, 3, 2, "", "state", "Reorders the qubits in the given order."], [173, 3, 2, "", "target_order", "Reorders the qubits in the given order."]], "mentpy.NumpySimulatorSV.reset": [[174, 3, 2, "", "input_state", "Resets the simulator to the initial state."]], "mentpy.NumpySimulatorSV.run": [[175, 3, 2, "p-angles", "angles", "List of angles to be used for the measurements."], [175, 3, 2, "", "kwargs", "Measures the quantum state in the given pattern."], [175, 3, 2, "p-output_form", "output_form", "Output form of the quantum state."]], "mentpy.PatternSimulator": [[177, 2, 1, "", "__call__", "Call self as a function."], [178, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [179, 2, 1, "", "__repr__", "Return repr(self)."], [180, 2, 1, "", "measure", ""], [181, 2, 1, "", "reset", ""], [182, 2, 1, "", "run", ""]], "mentpy.PatternSimulator.__call__": [[177, 3, 2, "", "angles", "Call self as a function."], [177, 3, 2, "", "kwargs", "Call self as a function."]], "mentpy.PatternSimulator.__init__": [[178, 3, 2, "", "args", "Initialize self.  See help(type(self)) for accurate signature."], [178, 3, 2, "", "backend", "Initialize self.  See help(type(self)) for accurate signature."], [178, 3, 2, "", "input_state", "Initialize self.  See help(type(self)) for accurate signature."], [178, 3, 2, "", "kwargs", "Initialize self.  See help(type(self)) for accurate signature."], [178, 3, 2, "", "mbqcircuit", "Initialize self.  See help(type(self)) for accurate signature."]], "mentpy.PatternSimulator.measure": [[180, 3, 2, "", "angle", ""], [180, 3, 2, "", "kwargs", ""]], "mentpy.PatternSimulator.reset": [[181, 3, 2, "", "input_state", ""]], "mentpy.PatternSimulator.run": [[182, 3, 2, "", "angles", ""], [182, 3, 2, "", "kwargs", ""]], "mentpy.PauliOp": [[184, 2, 1, "", "__eq__", "Return self==value."], [185, 2, 1, "", "__getitem__", ""], [186, 2, 1, "", "__hash__", "Return hash(self)."], [187, 2, 1, "", "__init__", "Initialize a PauliOp object."], [188, 2, 1, "", "__mul__", "Returns the product of two Pauli operators."], [189, 2, 1, "", "__repr__", "Return repr(self)."], [190, 2, 1, "", "append", "Appends a Pauli operator to the end of another Pauli operator."], [191, 2, 1, "", "commutator", "Returns the commutator of two Pauli operators."], [192, 2, 1, "", "get_subset", "Returns a subset of the Pauli operator."], [193, 4, 1, "", "number_of_qubits", "Returns the number of qubits in the Pauli operator."], [194, 2, 1, "", "symplectic_prod", "Returns the symplectic product of two Pauli operators."]], "mentpy.PauliOp.__eq__": [[184, 3, 2, "", "other", "Return self==value."]], "mentpy.PauliOp.__getitem__": [[185, 3, 2, "", "key", ""]], "mentpy.PauliOp.__init__": [[187, 3, 2, "", "op", "Initialize a PauliOp object."]], "mentpy.PauliOp.__mul__": [[188, 3, 2, "", "other", "Returns the product of two Pauli operators."]], "mentpy.PauliOp.append": [[190, 3, 2, "", "other", "Appends a Pauli operator to the end of another Pauli operator."]], "mentpy.PauliOp.commutator": [[191, 3, 2, "", "other", "Returns the commutator of two Pauli operators."]], "mentpy.PauliOp.get_subset": [[192, 3, 2, "p-indices", "indices", "The indices of the Pauli operators to be returned."]], "mentpy.PauliOp.symplectic_prod": [[194, 3, 2, "", "other", "Returns the symplectic product of two Pauli operators."]], "mentpy.PennylaneSimulator": [[196, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [197, 2, 1, "", "measure", "Measures the state of the system."], [198, 2, 1, "", "reset", "Resets the simulator to the initial state."], [199, 2, 1, "", "run", "Measures the state of the system."]], "mentpy.PennylaneSimulator.__init__": [[196, 3, 2, "", "args", "Initialize self.  See help(type(self)) for accurate signature."], [196, 3, 2, "", "input_state", "Initialize self.  See help(type(self)) for accurate signature."], [196, 3, 2, "", "kwargs", "Initialize self.  See help(type(self)) for accurate signature."], [196, 3, 2, "", "mbqcircuit", "Initialize self.  See help(type(self)) for accurate signature."]], "mentpy.PennylaneSimulator.measure": [[197, 3, 2, "p-angle", "angle", "The angle of measurement."], [197, 3, 2, "", "plane", "Measures the state of the system."]], "mentpy.PennylaneSimulator.reset": [[198, 3, 2, "", "input_state", "Resets the simulator to the initial state."]], "mentpy.PennylaneSimulator.run": [[199, 3, 2, "p-angles", "angles", "The parameters of the MBQC circuit (if any)."], [199, 3, 2, "", "kwargs", "Measures the state of the system."]], "mentpy.draw": [[200, 3, 2, "", "kwargs", "Draws mbqc circuit with flow."], [200, 3, 2, "", "state", "Draws mbqc circuit with flow."]], "mentpy.draw_with_wires": [[201, 3, 2, "", "fix_wires", "Draws mbqc circuit with flow."], [201, 3, 2, "", "kwargs", "Draws mbqc circuit with flow."], [201, 3, 2, "", "state", "Draws mbqc circuit with flow."]], "mentpy.hstack": [[202, 3, 2, "", "states", "Horizontally stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."]], "mentpy.mbqc.flow": [[203, 1, 1, "", "Flow", "This class deals with the flow of a given graph state"], [212, 6, 1, "", "find_cflow", "Finds the causal flow a graph."], [213, 6, 1, "", "find_gflow", "Finds the generalized flow of a graph."], [214, 6, 1, "", "find_pflow", "Find a p-flow in a given graph."], [215, 6, 1, "", "odd_neighborhood", "Returns the set of nodes in the graph that have an odd number of neighbors in A."]], "mentpy.mbqc.flow.Flow": [[204, 2, 1, "", "__call__", "Call self as a function."], [205, 2, 1, "", "__init__", "Initializes the flow of a given graph state. Assumes that graph has nodes labeled with numbers from 0 to n-1, where n is the number of nodes in the graph."], [206, 2, 1, "", "__repr__", "Return repr(self)."], [207, 2, 1, "", "adapt_angle", ""], [208, 2, 1, "", "adapt_angles", ""], [209, 2, 1, "", "correction_op", "Returns the correction operator for a given node."], [210, 2, 1, "", "generator_op", "Returns the generator operator for a given node."], [211, 2, 1, "", "initialize_flow", "Lazily initializes the flow properties when needed."]], "mentpy.mbqc.flow.Flow.__call__": [[204, 3, 2, "", "node", "Call self as a function."]], "mentpy.mbqc.flow.Flow.__init__": [[205, 3, 2, "", "graph", "Initializes the flow of a given graph state. Assumes that graph has nodes labeled with numbers from 0 to n-1, where n is the number of nodes in the graph."], [205, 3, 2, "", "input_nodes", "Initializes the flow of a given graph state. Assumes that graph has nodes labeled with numbers from 0 to n-1, where n is the number of nodes in the graph."], [205, 3, 2, "", "output_nodes", "Initializes the flow of a given graph state. Assumes that graph has nodes labeled with numbers from 0 to n-1, where n is the number of nodes in the graph."], [205, 3, 2, "", "planes", "Initializes the flow of a given graph state. Assumes that graph has nodes labeled with numbers from 0 to n-1, where n is the number of nodes in the graph."]], "mentpy.mbqc.flow.Flow.adapt_angle": [[207, 3, 2, "", "angle", ""], [207, 3, 2, "", "node", ""], [207, 3, 2, "", "previous_outcomes", ""]], "mentpy.mbqc.flow.Flow.adapt_angles": [[208, 3, 2, "", "angles", ""], [208, 3, 2, "", "outcomes", ""]], "mentpy.mbqc.flow.Flow.correction_op": [[209, 3, 2, "", "node", "Returns the correction operator for a given node."]], "mentpy.mbqc.flow.Flow.generator_op": [[210, 3, 2, "", "node", "Returns the generator operator for a given node."]], "mentpy.mbqc.flow.find_cflow": [[212, 3, 2, "p-graph", "graph", "The graph state to find the flow of."], [212, 3, 2, "p-input_nodes", "input_nodes", "The input nodes of the graph state."], [212, 3, 2, "p-output_nodes", "output_nodes", "The output nodes of the graph state."]], "mentpy.mbqc.flow.find_gflow": [[213, 3, 2, "p-graph", "graph", "The graph state to find the flow of."], [213, 3, 2, "p-input_nodes", "input_nodes", "The input nodes of the graph state."], [213, 3, 2, "p-output_nodes", "output_nodes", "The output nodes of the graph state."]], "mentpy.mbqc.flow.find_pflow": [[214, 3, 2, "p-I", "I", "The input nodes of the graph state."], [214, 3, 2, "p-O", "O", "The output nodes of the graph state."], [214, 3, 2, "p-graph", "graph", "The graph state to find the flow of."], [214, 3, 2, "p-planes", "planes", "The measurement planes of the graph state."]], "mentpy.mbqc.flow.odd_neighborhood": [[215, 3, 2, "", "A", "Returns the set of nodes in the graph that have an odd number of neighbors in A."], [215, 3, 2, "", "graph", "Returns the set of nodes in the graph that have an odd number of neighbors in A."]], "mentpy.mbqc.templates": [[216, 6, 1, "", "from_pauli", "Returns a graph state that can implement U=e^{-i \\theta P}"], [217, 6, 1, "", "grid_cluster", "Returns a grid cluster state of n x m qubits."], [218, 6, 1, "", "linear_cluster", "Returns a linear cluster state of n qubits."], [219, 6, 1, "", "many_wires", "Returns a graph state with many wires."], [220, 6, 1, "", "muta", "This is the Multiple Triangle Ansatz (MuTA) template."]], "mentpy.mbqc.templates.from_pauli": [[216, 3, 2, "p-pauli_op", "pauli_op", "The Pauli operator to implement."]], "mentpy.mbqc.templates.grid_cluster": [[217, 3, 2, "", "kwargs", "Returns a grid cluster state of n x m qubits."], [217, 3, 2, "p-m", "m", "The number of columns in the cluster state."], [217, 3, 2, "p-n", "n", "The number of rows in the cluster state."], [217, 3, 2, "p-periodic", "periodic", "If True, the returned state will be a cylinder."]], "mentpy.mbqc.templates.linear_cluster": [[218, 3, 2, "", "kwargs", "Returns a linear cluster state of n qubits."], [218, 3, 2, "p-n", "n", "The number of qubits in the cluster state."]], "mentpy.mbqc.templates.many_wires": [[219, 3, 2, "", "kwargs", "Returns a graph state with many wires."], [219, 3, 2, "p-n_wires", "n_wires", "A list of the number of qubits in each wire."]], "mentpy.mbqc.templates.muta": [[220, 3, 2, "", "kwargs", "This is the Multiple Triangle Ansatz (MuTA) template."], [220, 3, 2, "p-n_layers", "n_layers", "The number of layers in the graph state."], [220, 3, 2, "p-n_wires", "n_wires", "The number of wires in the graph state."]], "mentpy.merge": [[221, 3, 2, "", "along", "Merge two MBQC circuits into a larger MBQC circuit. This is, the input and output of the new MBQC circuit will depend on the concat_indices."], [221, 3, 2, "", "state1", "Merge two MBQC circuits into a larger MBQC circuit. This is, the input and output of the new MBQC circuit will depend on the concat_indices."], [221, 3, 2, "", "state2", "Merge two MBQC circuits into a larger MBQC circuit. This is, the input and output of the new MBQC circuit will depend on the concat_indices."]], "mentpy.optimizers": [[245, 1, 1, "", "AdamOpt", "Class for the Adam optimizer."], [252, 1, 1, "", "RCDOpt", "Class for the random coordinate descent optimizer."], [259, 1, 1, "", "SGDOpt", "Class for the SGD optimizer."]], "mentpy.optimizers.AdamOpt": [[246, 2, 1, "", "__init__", "Initialize the Adam optimizer."], [247, 2, 1, "", "optimize", "Optimize a function f using the Adam optimizer."], [248, 2, 1, "", "optimize_and_gradient_norm", "Optimize a function f using the Adam optimizer."], [249, 2, 1, "", "reset", "Reset the optimizer."], [250, 2, 1, "", "step", "Take a step of the optimizer."], [251, 2, 1, "", "update_step_size", "Update the step size of the optimizer."]], "mentpy.optimizers.AdamOpt.__init__": [[246, 3, 2, "", "b1", "Initialize the Adam optimizer."], [246, 3, 2, "", "b2", "Initialize the Adam optimizer."], [246, 3, 2, "", "eps", "Initialize the Adam optimizer."], [246, 3, 2, "", "step_size", "Initialize the Adam optimizer."]], "mentpy.optimizers.AdamOpt.optimize": [[247, 3, 2, "", "callback", "Optimize a function f using the Adam optimizer."], [247, 3, 2, "", "f", "Optimize a function f using the Adam optimizer."], [247, 3, 2, "", "kwargs", "Optimize a function f using the Adam optimizer."], [247, 3, 2, "", "num_iters", "Optimize a function f using the Adam optimizer."], [247, 3, 2, "", "verbose", "Optimize a function f using the Adam optimizer."], [247, 3, 2, "", "x0", "Optimize a function f using the Adam optimizer."]], "mentpy.optimizers.AdamOpt.optimize_and_gradient_norm": [[248, 3, 2, "", "callback", "Optimize a function f using the Adam optimizer."], [248, 3, 2, "", "f", "Optimize a function f using the Adam optimizer."], [248, 3, 2, "", "kwargs", "Optimize a function f using the Adam optimizer."], [248, 3, 2, "", "num_iters", "Optimize a function f using the Adam optimizer."], [248, 3, 2, "", "verbose", "Optimize a function f using the Adam optimizer."], [248, 3, 2, "", "x0", "Optimize a function f using the Adam optimizer."]], "mentpy.optimizers.AdamOpt.step": [[250, 3, 2, "", "f", "Take a step of the optimizer."], [250, 3, 2, "", "i", "Take a step of the optimizer."], [250, 3, 2, "", "kwargs", "Take a step of the optimizer."], [250, 3, 2, "", "x", "Take a step of the optimizer."]], "mentpy.optimizers.AdamOpt.update_step_size": [[251, 3, 2, "", "factor", "Update the step size of the optimizer."], [251, 3, 2, "", "i", "Update the step size of the optimizer."], [251, 3, 2, "", "x", "Update the step size of the optimizer."]], "mentpy.optimizers.RCDOpt": [[253, 2, 1, "", "__init__", "Initialize the random coordinate descent optimizer."], [254, 2, 1, "", "optimize", "Optimize a function f using the random coordinate descent optimizer."], [255, 2, 1, "", "optimize_and_gradient_norm", "Optimize a function f using the random coordinate descent optimizer."], [256, 2, 1, "", "reset", ""], [257, 2, 1, "", "step", "Take a step using the random coordinate descent optimizer."], [258, 2, 1, "", "update_step_size", "Update the step size of the optimizer."]], "mentpy.optimizers.RCDOpt.__init__": [[253, 3, 2, "", "adaptive", "Initialize the random coordinate descent optimizer."], [253, 3, 2, "", "step_size", "Initialize the random coordinate descent optimizer."]], "mentpy.optimizers.RCDOpt.optimize": [[254, 3, 2, "", "callback", "Optimize a function f using the random coordinate descent optimizer."], [254, 3, 2, "", "f", "Optimize a function f using the random coordinate descent optimizer."], [254, 3, 2, "", "kwargs", "Optimize a function f using the random coordinate descent optimizer."], [254, 3, 2, "", "num_iters", "Optimize a function f using the random coordinate descent optimizer."], [254, 3, 2, "", "verbose", "Optimize a function f using the random coordinate descent optimizer."], [254, 3, 2, "", "x0", "Optimize a function f using the random coordinate descent optimizer."]], "mentpy.optimizers.RCDOpt.optimize_and_gradient_norm": [[255, 3, 2, "", "callback", "Optimize a function f using the random coordinate descent optimizer."], [255, 3, 2, "", "f", "Optimize a function f using the random coordinate descent optimizer."], [255, 3, 2, "", "kwargs", "Optimize a function f using the random coordinate descent optimizer."], [255, 3, 2, "", "num_iters", "Optimize a function f using the random coordinate descent optimizer."], [255, 3, 2, "", "verbose", "Optimize a function f using the random coordinate descent optimizer."], [255, 3, 2, "", "x0", "Optimize a function f using the random coordinate descent optimizer."]], "mentpy.optimizers.RCDOpt.reset": [[256, 3, 2, "", "args", ""], [256, 3, 2, "", "kwargs", ""]], "mentpy.optimizers.RCDOpt.step": [[257, 3, 2, "", "f", "Take a step using the random coordinate descent optimizer."], [257, 3, 2, "", "i", "Take a step using the random coordinate descent optimizer."], [257, 3, 2, "", "kwargs", "Take a step using the random coordinate descent optimizer."], [257, 3, 2, "", "x", "Take a step using the random coordinate descent optimizer."]], "mentpy.optimizers.RCDOpt.update_step_size": [[258, 3, 2, "", "factor", "Update the step size of the optimizer."], [258, 3, 2, "", "i", "Update the step size of the optimizer."], [258, 3, 2, "", "x", "Update the step size of the optimizer."]], "mentpy.optimizers.SGDOpt": [[260, 2, 1, "", "__init__", "Initialize the SGD optimizer."], [261, 2, 1, "", "optimize", "Optimize a function f using the SGD optimizer."], [262, 2, 1, "", "optimize_and_gradient_norm", "Optimize a function f using the SGD optimizer."], [263, 2, 1, "", "reset", "Reset the optimizer."], [264, 2, 1, "", "step", "Take a step of the SGD optimizer."], [265, 2, 1, "", "update_step_size", "Update the step size of the optimizer."]], "mentpy.optimizers.SGDOpt.__init__": [[260, 3, 2, "", "momentum", "Initialize the SGD optimizer."], [260, 3, 2, "", "nesterov", "Initialize the SGD optimizer."], [260, 3, 2, "", "step_size", "Initialize the SGD optimizer."]], "mentpy.optimizers.SGDOpt.optimize": [[261, 3, 2, "", "callback", "Optimize a function f using the SGD optimizer."], [261, 3, 2, "", "f", "Optimize a function f using the SGD optimizer."], [261, 3, 2, "", "kwargs", "Optimize a function f using the SGD optimizer."], [261, 3, 2, "", "num_iters", "Optimize a function f using the SGD optimizer."], [261, 3, 2, "", "verbose", "Optimize a function f using the SGD optimizer."], [261, 3, 2, "", "x0", "Optimize a function f using the SGD optimizer."]], "mentpy.optimizers.SGDOpt.optimize_and_gradient_norm": [[262, 3, 2, "", "callback", "Optimize a function f using the SGD optimizer."], [262, 3, 2, "", "f", "Optimize a function f using the SGD optimizer."], [262, 3, 2, "", "kwargs", "Optimize a function f using the SGD optimizer."], [262, 3, 2, "", "num_iters", "Optimize a function f using the SGD optimizer."], [262, 3, 2, "", "verbose", "Optimize a function f using the SGD optimizer."], [262, 3, 2, "", "x0", "Optimize a function f using the SGD optimizer."]], "mentpy.optimizers.SGDOpt.reset": [[263, 3, 2, "", "args", "Reset the optimizer."], [263, 3, 2, "", "kwargs", "Reset the optimizer."]], "mentpy.optimizers.SGDOpt.step": [[264, 3, 2, "", "f", "Take a step of the SGD optimizer."], [264, 3, 2, "", "i", "Take a step of the SGD optimizer."], [264, 3, 2, "", "kwargs", "Take a step of the SGD optimizer."], [264, 3, 2, "", "x", "Take a step of the SGD optimizer."]], "mentpy.optimizers.SGDOpt.update_step_size": [[265, 3, 2, "", "factor", "Update the step size of the optimizer."], [265, 3, 2, "", "i", "Update the step size of the optimizer."], [265, 3, 2, "", "x", "Update the step size of the optimizer."]], "mentpy.parse_version": [[222, 3, 2, "p-version", "version", "The version string to parse."]], "mentpy.utils": [[223, 1, 1, "", "FlowSpace", "The flow space graph of a MBQCircuit."], [226, 6, 1, "", "are_lc_equivalent", "Check if two EGraphs are LC equivalent, and return the Clifford operation if so. Implemented as in arXiv:quant-ph/0405023. :param graph1: the initial graph to check Clifford equivalence with. :param graph2: the graph to check Clifford equivalence against. :param clifford_form: a string describing the output form of local Clifford operation, if"], [227, 6, 1, "", "calculate_complete_gens", "Calculates the complete generators for the Lie algebra of a given circuit."], [228, 6, 1, "", "calculate_gens", "Calculates the generators of the Lie algebra of a given circuit removing repeated operators"], [229, 6, 1, "", "calculate_lie_algebra", "Calculates the Lie algebra of a given MBQCircuit"], [230, 6, 1, "", "calculate_ordered_gens", "Calculates the generators of a given circuit in order. The i-th generator corresponds to the i-th trainable node in the circuit."], [231, 6, 1, "", "digraph_expressivity_of_flow_space", "Returns digraph given the expressivity of a FlowSpace object."], [232, 6, 1, "", "dim_so", "Calculates the dimension of \\mathfrak{so}(n)"], [233, 6, 1, "", "dim_sp", "Calculates the dimension of \\mathfrak{sp}(n)"], [234, 6, 1, "", "dim_su", "Calculates the dimension of \\mathfrak{su}(n)"], [235, 6, 1, "", "draw_digraph_flow_space", "Draws the expressivity digraph of flow space"], [236, 6, 1, "", "expressivity_with_histogram", "Returns the expressivity calculated using the Kullback-Leiber entropy"], [237, 6, 1, "", "generate_haar_random_states", "Makes one Haar random state over n_qubits"], [238, 6, 1, "", "generate_random_dataset", "Return random training and test data (input, target) for a given unitary gate unitary."], [239, 6, 1, "", "generate_random_dataset_noisy", "Return random training data (input, target) for a given unitary gate unitary with brownian noise parametrized by noise_level."], [240, 6, 1, "", "lc_cluster_flowspace", "Cluster flow graph in lc_equivalent graphs."], [241, 6, 1, "", "lie_algebra_completion", "Completes a given set of Pauli operators to a basis of the Lie algebra"], [242, 6, 1, "", "sample_probability_density_of_fidelities", "Calculates samples of the probability of fidelities of the given graph state circuit"], [243, 6, 1, "", "train_test_split", "Split the data into training and test sets."]], "mentpy.utils.FlowSpace": [[224, 2, 1, "", "__init__", "Creates the flow graph space of a graph state circuit."], [225, 2, 1, "", "__repr__", "Returns the representation of the flow space"]], "mentpy.utils.FlowSpace.__init__": [[224, 3, 2, "", "allow_any_size_graphs", "Creates the flow graph space of a graph state circuit."], [224, 3, 2, "", "input_nodes", "Creates the flow graph space of a graph state circuit."], [224, 3, 2, "", "n_qubits", "Creates the flow graph space of a graph state circuit."], [224, 3, 2, "", "output_nodes", "Creates the flow graph space of a graph state circuit."]], "mentpy.utils.are_lc_equivalent": [[226, 3, 2, "", "clifford_form", "Check if two EGraphs are LC equivalent, and return the Clifford operation if so. Implemented as in arXiv:quant-ph/0405023. :param graph1: the initial graph to check Clifford equivalence with. :param graph2: the graph to check Clifford equivalence against. :param clifford_form: a string describing the output form of local Clifford operation, if"], [226, 3, 2, "", "graph1", "Check if two EGraphs are LC equivalent, and return the Clifford operation if so. Implemented as in arXiv:quant-ph/0405023. :param graph1: the initial graph to check Clifford equivalence with. :param graph2: the graph to check Clifford equivalence against. :param clifford_form: a string describing the output form of local Clifford operation, if"], [226, 3, 2, "", "graph2", "Check if two EGraphs are LC equivalent, and return the Clifford operation if so. Implemented as in arXiv:quant-ph/0405023. :param graph1: the initial graph to check Clifford equivalence with. :param graph2: the graph to check Clifford equivalence against. :param clifford_form: a string describing the output form of local Clifford operation, if"]], "mentpy.utils.calculate_complete_gens": [[227, 3, 2, "", "circuit", "Calculates the complete generators for the Lie algebra of a given circuit."]], "mentpy.utils.calculate_gens": [[228, 3, 2, "", "circuit", "Calculates the generators of the Lie algebra of a given circuit removing repeated operators"]], "mentpy.utils.calculate_lie_algebra": [[229, 3, 2, "", "circuit", "Calculates the Lie algebra of a given MBQCircuit"], [229, 3, 2, "", "max_iter", "Calculates the Lie algebra of a given MBQCircuit"]], "mentpy.utils.calculate_ordered_gens": [[230, 3, 2, "p-circuit", "circuit", "The state for which to calculate the possible rotations"]], "mentpy.utils.digraph_expressivity_of_flow_space": [[231, 3, 2, "", "flow_space", "Returns digraph given the expressivity of a FlowSpace object."], [231, 3, 2, "", "kwargs", "Returns digraph given the expressivity of a FlowSpace object."], [231, 3, 2, "", "method", "Returns digraph given the expressivity of a FlowSpace object."]], "mentpy.utils.dim_so": [[232, 3, 2, "", "n", "Calculates the dimension of \\mathfrak{so}(n)"]], "mentpy.utils.dim_sp": [[233, 3, 2, "", "n", "Calculates the dimension of \\mathfrak{sp}(n)"]], "mentpy.utils.dim_su": [[234, 3, 2, "", "n", "Calculates the dimension of \\mathfrak{su}(n)"]], "mentpy.utils.draw_digraph_flow_space": [[235, 3, 2, "", "**kwargs", "Draws the expressivity digraph of flow space"]], "mentpy.utils.draw_digraph_flow_space.digraph_expr: &lt;module &#x27;networkx.classes.digraph&#x27; from &#x27;/opt/hostedtoolcache/Python/3.10.16/x64/lib/python3.10/site-packages/networkx/classes/digraph": [[235, 3, 2, "", "py&#x27;&gt;", "Draws the expressivity digraph of flow space"]], "mentpy.utils.expressivity_with_histogram": [[236, 3, 2, "p-graph_state_circuit", "graph_state_circuit", ""], [236, 3, 2, "p-method", "method", ""], [236, 3, 2, "p-n_bins", "n_bins", ""], [236, 3, 2, "p-n_samples", "n_samples", ""]], "mentpy.utils.generate_haar_random_states": [[237, 3, 2, "", "n_qubits", "Makes one Haar random state over n_qubits"], [237, 3, 2, "", "n_samples", "Makes one Haar random state over n_qubits"]], "mentpy.utils.generate_random_dataset": [[238, 3, 2, "", "n_samples", "Return random training and test data (input, target) for a given unitary gate unitary."], [238, 3, 2, "", "test_size", "Return random training and test data (input, target) for a given unitary gate unitary."], [238, 3, 2, "", "unitary", "Return random training and test data (input, target) for a given unitary gate unitary."]], "mentpy.utils.generate_random_dataset_noisy": [[239, 3, 2, "p-n_samples", "n_samples", "number of samples"], [239, 3, 2, "p-noise_level", "noise_level", "noise level"], [239, 3, 2, "p-noise_type", "noise_type", "type of noise."], [239, 3, 2, "p-test_size", "test_size", "percentage of test data"], [239, 3, 2, "p-unitary", "unitary", "unitary gate"]], "mentpy.utils.lc_cluster_flowspace": [[240, 3, 2, "", "deg_graph", "Cluster flow graph in lc_equivalent graphs."], [240, 3, 2, "", "sanity_check", "Cluster flow graph in lc_equivalent graphs."]], "mentpy.utils.lie_algebra_completion": [[241, 3, 2, "", "generators", "Completes a given set of Pauli operators to a basis of the Lie algebra"], [241, 3, 2, "", "max_iter", "Completes a given set of Pauli operators to a basis of the Lie algebra"]], "mentpy.utils.sample_probability_density_of_fidelities": [[242, 3, 2, "", "backend", "Calculates samples of the probability of fidelities of the given graph state circuit"], [242, 3, 2, "", "graph_state_circuit", "Calculates samples of the probability of fidelities of the given graph state circuit"], [242, 3, 2, "", "n_samples", "Calculates samples of the probability of fidelities of the given graph state circuit"]], "mentpy.utils.train_test_split": [[243, 3, 2, "", "inputs", "Split the data into training and test sets."], [243, 3, 2, "", "randomize", "Split the data into training and test sets."], [243, 3, 2, "", "targets", "Split the data into training and test sets."], [243, 3, 2, "", "test_size", "Split the data into training and test sets."]], "mentpy.vstack": [[244, 3, 2, "", "states", "Vertically stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:attribute", "6": "py:function"}, "terms": {"": [30, 31, 33, 34, 37, 62, 63, 68, 71, 91, 99, 267, 269, 270, 272, 273, 274, 276], "0": [12, 21, 24, 26, 29, 30, 31, 32, 33, 34, 36, 70, 72, 73, 74, 75, 76, 77, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 183, 192, 203, 205, 222, 238, 239, 243, 245, 246, 251, 252, 253, 258, 259, 260, 265, 266, 267, 268, 270, 272, 273, 274, 276, 277, 278], "00": 268, "0000000149011603": 278, "000000e": 268, "01": [268, 274], "02j": 278, "0405023": 226, "040504": 272, "05": [272, 274, 277], "05654v1": 214, "061617e": 268, "0709": [212, 213], "07902": 267, "08": [245, 246, 276, 277], "09342": 267, "0a15": 270, "0x7fcc271bc490": 272, "0x7fcc45c94e80": 259, "0x7fcc6167e6e0": 252, "0x7fcc6167f9d0": 245, "1": [21, 22, 24, 26, 30, 31, 32, 33, 34, 35, 36, 70, 72, 73, 74, 75, 76, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 183, 190, 192, 203, 205, 216, 217, 218, 219, 220, 222, 229, 237, 245, 246, 252, 253, 259, 260, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278], "10": [32, 33, 99, 216, 235, 245, 267, 269, 272, 273, 276, 277, 278], "100": [245, 247, 248, 252, 254, 255, 259, 261, 262, 276], "1000": [99, 236, 241, 242], "10000": [229, 236], "1000000": 274, "11": [33, 267, 272, 276, 278], "12": [267, 272, 274, 278], "1200x400": 278, "122": 272, "123234e": 268, "13": [32, 267, 272, 278], "14": [267, 272, 278], "15": [30, 267, 269, 272, 274, 278], "16": [220, 235, 267, 272, 274, 276, 277, 278], "1600x500": 220, "17": [267, 268, 272, 278], "17j": 278, "18": [267, 272, 276, 277, 278], "180": 278, "19": [267, 272, 278], "1d": [21, 93, 100, 218], "1e": [245, 246], "2": [21, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 65, 70, 72, 74, 76, 84, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 183, 190, 192, 216, 217, 218, 219, 220, 229, 245, 252, 259, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278], "20": [99, 267, 272, 276, 277, 278], "200": [272, 274, 277], "2001": 267, "2019": 272, "2020": 272, "2021": 272, "2023": [267, 271, 276], "209": 272, "21": [267, 278], "2109": 214, "212": 272, "22": [267, 278], "225": 99, "23": [267, 278], "2309": 267, "24": [267, 278], "25": [267, 278], "26": [267, 278], "2670v1": [212, 213], "27": [267, 278], "28": [267, 278], "29": [267, 278], "29139903e": 278, "2d": [217, 272], "2dfamili": 273, "2nx2n": 226, "2x2": 226, "3": [21, 26, 29, 30, 31, 32, 33, 34, 35, 36, 70, 71, 73, 74, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 100, 183, 190, 216, 217, 219, 220, 229, 235, 238, 239, 243, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278], "30": [274, 278], "300": 274, "31": 278, "32": 278, "33": 278, "34": 278, "342": 30, "35": 278, "36": 278, "37": 278, "38": 278, "382871": 32, "39": 278, "3972649": 32, "3x3": 229, "4": [21, 22, 24, 26, 27, 31, 32, 33, 34, 36, 69, 70, 71, 72, 73, 75, 76, 83, 85, 88, 89, 91, 92, 93, 94, 99, 100, 183, 190, 219, 266, 267, 268, 269, 272, 273, 274, 276, 277, 278], "40": 278, "403": 272, "409": 272, "41": 278, "42": [272, 278], "42595093e": 278, "48415854e": 278, "48423248": 278, "49420331": 278, "5": [21, 30, 31, 34, 71, 73, 74, 99, 183, 218, 220, 266, 267, 268, 269, 272, 274, 276, 277, 278], "50": [273, 278], "500": [274, 277], "51576752": 278, "5188": 267, "5191": 267, "567": 272, "585": [37, 38], "5j": 268, "5pm": 84, "6": [92, 183, 267, 268, 269, 272, 273, 276, 277, 278], "60": 277, "64": 267, "7": [30, 34, 75, 76, 83, 88, 99, 267, 268, 269, 272, 276, 277, 278], "700": 278, "8": [223, 245, 267, 269, 272, 274, 276, 277, 278], "800x300": [216, 217, 218, 219, 267, 276, 277], "86": 267, "9": [245, 246, 259, 267, 269, 270, 272, 276, 277, 278], "99": [245, 251, 252, 258, 259, 265, 274], "999": [245, 246], "A": [0, 21, 24, 32, 33, 71, 72, 74, 83, 84, 90, 91, 94, 95, 97, 150, 163, 215, 219, 245, 267, 271, 272], "At": 267, "Be": 276, "But": 75, "By": 267, "For": [30, 34, 35, 36, 71, 74, 85, 94, 267], "If": [37, 64, 67, 71, 72, 74, 82, 83, 84, 85, 88, 90, 91, 92, 95, 96, 97, 98, 99, 203, 217, 226, 267, 269, 270, 271, 276, 277], "In": [21, 37, 67, 84, 93, 94, 100, 183, 190, 192, 216, 217, 218, 219, 220, 229, 245, 252, 259, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278], "It": [77, 84, 99, 267, 270, 272], "NOT": 94, "Not": [84, 267], "OR": 33, "On": 32, "One": 267, "That": 71, "The": [0, 1, 5, 6, 7, 8, 10, 24, 27, 30, 31, 34, 35, 71, 72, 73, 74, 75, 76, 82, 84, 85, 86, 87, 89, 92, 94, 99, 100, 150, 156, 163, 169, 176, 183, 192, 195, 197, 199, 203, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 230, 245, 252, 259, 266, 267, 268, 270, 271, 272], "Then": 277, "There": [71, 84], "To": [31, 33, 34, 73, 82, 84, 91, 94, 99, 266, 267, 269, 270, 276], "Will": [89, 214], "_": 278, "_1": 278, "_2": 278, "__call__": [1, 2, 137, 138, 150, 163, 176, 177, 195, 203, 204], "__class__": [71, 94], "__contains__": [21, 22, 37, 39], "__delitem__": [37, 40, 100, 101], "__eq__": [21, 23, 37, 41, 137, 139, 183, 184], "__ge__": [37, 42, 137, 140], "__getattribute__": [37, 43], "__getitem__": [21, 24, 37, 44, 100, 102, 183, 185], "__gt__": [37, 45, 137, 141], "__hash__": [183, 186], "__init__": 274, "__ior__": [37, 46], "__iter__": [21, 26, 37, 47, 82], "__le__": [37, 48, 137, 143], "__len__": [21, 27, 37, 49, 86, 87, 100, 104], "__lt__": [37, 50, 137, 144], "__mul__": [183, 188], "__ne__": [37, 51, 137, 145], "__or__": [37, 53, 137, 146], "__repr__": [1, 4, 11, 13, 21, 28, 37, 54, 100, 105, 125, 127, 137, 147, 150, 163, 176, 179, 183, 189, 195, 203, 206, 223, 225], "__reversed__": [37, 55], "__ror__": [37, 56], "__setitem__": [37, 57, 100, 106], "__str__": [21, 29], "__version__": 270, "_build": 270, "_get_info": 274, "_get_ob": 274, "_i": 276, "_np": 277, "ab": 273, "abba": 272, "abc": [0, 1], "about": [214, 272], "abov": 270, "abstract": [1, 7, 9, 10], "accept": 267, "access": [30, 74, 83, 278], "accord": [226, 273], "accur": [1, 3, 37, 52, 137, 142, 150, 151, 163, 164, 176, 178, 195, 196], "accuraci": 272, "accuracy_scor": 272, "achiev": 230, "act": [71, 226], "action": 274, "action_spac": 274, "activ": [271, 274, 277, 278], "actual": [71, 269], "ad": [30, 31, 33, 34, 99, 223, 269, 270], "adam": [0, 245, 246, 247, 248, 273], "adamopt": [0, 245, 246, 247, 248, 249, 250, 251, 259, 273, 276, 277, 278], "adapt": [252, 253, 273], "adapt_angl": [203, 207, 208], "add": [21, 30, 31, 32, 33, 34, 99, 100, 107, 108, 201, 271], "add_edg": [21, 30, 31, 34, 74, 83, 85, 92, 95, 97, 100, 107, 278], "add_edges_from": [21, 30, 31, 34, 71, 93, 94, 97, 99, 100, 108, 266, 267], "add_nod": [21, 32, 33, 84], "add_nodes_from": [21, 32, 33, 71, 94, 99], "add_weighted_edges_from": [21, 31, 34], "addit": [84, 270], "addition": 270, "adj": [21, 24, 35, 83, 94, 99], "adj_dict": 24, "adj_it": 36, "adjac": [21, 24, 35, 36, 72, 90, 99], "adjlist_inner_dict_factori": [21, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "adjlist_outer_dict_factori": 21, "adjoint": 267, "affect": 71, "after": 82, "against": 226, "agent": 274, "aip": 271, "al": 272, "algebra": [0, 227, 228, 229, 241, 267, 271], "algorithm": [30, 203, 212, 213, 214, 274], "alia": [21, 37, 125, 267], "all": [21, 26, 30, 31, 33, 34, 36, 37, 58, 69, 70, 71, 72, 74, 82, 83, 84, 85, 89, 90, 92, 95, 97, 203, 226, 267, 270], "all_training_progress": 274, "allow": [74, 84], "allow_any_size_graph": 224, "along": [84, 221, 267, 278], "alpha": [271, 272, 274, 276, 278], "alreadi": [30, 95], "also": [35, 69, 74, 84, 267, 270, 274], "alter": [21, 70], "altern": 83, "an": [0, 21, 24, 26, 30, 31, 33, 34, 36, 37, 68, 71, 72, 73, 74, 75, 81, 82, 83, 84, 88, 89, 90, 91, 92, 94, 97, 99, 100, 107, 215, 245, 252, 259, 267, 268, 269, 270, 271, 272, 277, 278], "analysi": 272, "analyt": 278, "analyz": 271, "angl": [1, 2, 7, 10, 11, 14, 17, 19, 125, 126, 128, 130, 132, 136, 150, 156, 157, 162, 163, 169, 170, 175, 176, 177, 180, 182, 195, 197, 199, 203, 207, 208, 267, 268, 269, 271, 272, 273, 274, 276, 278], "angle_combin": 274, "angle_to_text": 278, "angles1": 272, "angles2": 272, "ani": [10, 11, 29, 31, 32, 71, 73, 75, 82, 125, 133, 199, 267, 270], "anoth": [183, 190, 223], "ansatz": [0, 220, 271, 278], "ans\u00e4tz": 267, "apa": 271, "appear": 81, "append": [183, 190, 273, 274, 276, 277, 278], "appli": [267, 272], "apply_hadamard": 278, "ar": [21, 30, 31, 33, 34, 36, 65, 71, 72, 73, 74, 76, 82, 83, 84, 85, 91, 92, 94, 99, 100, 150, 152, 153, 163, 165, 166, 201, 203, 214, 226, 266, 267, 268, 270, 276], "arang": [272, 277], "are_lc_equival": 226, "arg": [11, 14, 17, 19, 20, 21, 25, 125, 130, 132, 137, 138, 178, 196, 252, 256, 259, 263, 273], "argpars": 273, "argument": [30, 31, 32, 33, 34, 84, 99, 220, 267, 269], "around": 216, "arrai": [183, 226, 268, 272, 273, 274, 276, 277, 278], "arrow": 267, "arxiv": [212, 213, 214, 226, 267], "as_view": [21, 71, 95, 97], "assign": [30, 31, 75], "assist": 270, "associ": [21, 30, 31, 75], "assum": [84, 203, 205], "asymmetr": 273, "atlasview": [24, 83], "attempt": [90, 95, 97], "attr": [21, 30, 31, 32, 33, 34], "attrdict": 33, "attribut": [21, 30, 31, 32, 33, 34, 69, 71, 72, 73, 74, 75, 81, 84, 88, 92, 94, 95, 97, 99], "author": [271, 272, 273, 274, 276], "autodiff": 271, "automat": [30, 271], "avail": 84, "averag": 276, "avg_fidel": [274, 276, 277, 278], "avoid": [31, 33, 34, 91, 245, 272], "awar": 276, "ax": [0, 200, 201, 216, 217, 218, 219, 220, 267, 272, 276, 277, 278], "axi": [272, 274, 276, 277, 278], "axvlin": 274, "b": [75, 83, 92, 267, 274], "b1": [245, 246], "b2": [245, 246], "backend": [176, 178, 242, 269, 272, 274, 278], "bakalov": 267, "bar": 84, "barren": [267, 276], "base": [0, 1, 94, 96, 98, 245, 252, 259, 267, 268, 271, 272, 276], "baseopt": [0, 245, 252, 259], "basesimul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 150, 163, 195], "basi": [0, 241, 267], "basic": 268, "basis0_1": 273, "basis0_2": 273, "basis1_1": 273, "basis1_2": 273, "batch_i": 273, "batch_siz": 273, "batch_x": 273, "bbox_inch": 274, "becom": [82, 84], "been": 267, "befor": [34, 270, 274], "begin": 272, "behav": 35, "below": [30, 274], "best": 274, "best_angl": 274, "best_cost": 274, "best_solut": 274, "between": [21, 30, 71, 85, 88, 89, 94, 100, 107, 223, 276, 277], "bibtex": 271, "big": 267, "bin": 236, "bitflip": [239, 277], "black": 278, "blob": 272, "blobs_df": 272, "block": 268, "blue": [33, 35, 272, 276, 277, 278], "bondarenko": [271, 273], "bool": [11, 12, 15, 71, 74, 76, 84, 97, 103, 137, 142, 214, 217, 220, 224, 226, 252, 259], "both": [274, 276, 277], "boundari": 272, "box": 274, "bra": 278, "braket": 272, "break": [274, 277, 278], "briegel": 267, "british": 276, "brownian": [0, 239, 277], "browser": 270, "bug": 270, "build": [268, 270], "c": [74, 92, 100, 116, 121, 267, 272, 274, 276, 278], "c_": 272, "calcul": [0, 93, 227, 228, 229, 230, 232, 233, 234, 236, 242, 267, 271, 272, 274, 276, 277, 278], "calculate_complete_gen": [0, 227], "calculate_gen": [0, 228], "calculate_lie_algebra": [0, 229, 267], "calculate_ord": [100, 109], "calculate_ordered_gen": [0, 230], "calder\u00f3n": [271, 276], "call": [1, 2, 74, 84, 137, 138, 150, 163, 176, 177, 195, 203, 204, 269], "callabl": [100, 122, 137, 142], "callback": [245, 247, 248, 252, 254, 255, 259, 261, 262, 274, 276, 278], "callit": 278, "can": [0, 30, 31, 32, 33, 34, 71, 74, 76, 82, 84, 85, 89, 94, 99, 175, 183, 216, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278], "cannot": 94, "capac": 30, "capsiz": 277, "care": 32, "case": [37, 67, 94, 99, 274, 278], "caus": 71, "causal": [0, 212, 271], "cd": 270, "center": 272, "cerezo": 267, "chakrabarti": 267, "chang": [31, 32, 33, 34, 71, 91, 94, 95, 97, 267, 270, 277], "character": 267, "check": [82, 226, 270], "choic": 274, "circ": 229, "circuit": [0, 1, 6, 10, 100, 105, 110, 111, 112, 113, 115, 117, 118, 119, 120, 122, 123, 124, 150, 163, 176, 195, 199, 200, 201, 202, 221, 223, 224, 227, 228, 229, 230, 236, 242, 244, 266, 268, 271, 272, 276], "cirqsimul": [1, 176, 195], "cite": 271, "class": [0, 1, 11, 96, 98, 100, 137, 150, 163, 176, 183, 195, 203, 223, 235, 245, 252, 259, 266, 267, 268, 269, 274, 276], "classical_output_nod": [100, 110], "classif": [272, 273], "clear": [21, 37, 58, 69, 274], "clear_edg": [21, 70], "clf": 272, "clifford": 226, "clifford_form": 226, "clone": 270, "close": [274, 278], "cluster": [0, 21, 93, 100, 217, 218, 229, 240, 267], "cluster_std": 272, "cmap": [272, 274], "co": [272, 273], "code": [94, 271], "coeff": 273, "collect": [30, 88, 99, 272, 278], "color": [33, 35, 74, 84, 99, 272, 274, 276, 277, 278], "colorbar": 272, "columbia": 276, "column": [217, 220, 272], "com": [270, 271], "combin": 99, "command": [91, 270], "comment": [276, 277], "common": [99, 267], "commut": [183, 191], "complement": [100, 116, 121], "complet": [0, 95, 97, 227, 241, 278], "complete_graph": 99, "complex": 273, "comput": [266, 267, 268, 271, 272, 277], "concat_indic": [0, 221], "concaten": [267, 273], "cond_nod": [137, 142, 148], "condit": [11, 12, 15, 214], "confus": 71, "conj": [273, 274, 278], "connect": 24, "consid": 271, "construct": [272, 273, 275], "constructor": 267, "contain": [21, 30, 31, 33, 34, 71, 72, 73, 74, 77, 82, 89, 91, 94, 99, 267, 271], "contour": 272, "contourf": 272, "contrast": [95, 97], "contribut": 270, "contributor": 270, "control": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 74, 81, 100, 111, 201, 266, 278], "controlled_nod": [100, 111], "conveni": 31, "coolwarm": 272, "coordin": [0, 252, 253, 254, 255, 257], "copi": [11, 16, 21, 37, 59, 71, 73, 94, 95, 96, 97, 98, 125, 129, 274, 277], "core": 272, "correct": [31, 33, 34, 203, 209], "correction_op": [203, 209, 216], "correctli": 270, "correspond": [0, 37, 64, 73, 223, 226, 230], "cost": [273, 274, 276, 277, 278], "cost_cal": 274, "cost_test": [273, 274, 276, 278], "cost_train": [273, 274, 276, 278], "could": 71, "count": 85, "cover": 270, "coverag": 271, "creat": [21, 37, 52, 60, 71, 73, 84, 94, 95, 97, 100, 183, 216, 217, 218, 219, 220, 223, 224, 245, 252, 259, 266, 269, 271, 272, 274], "create_callback": [274, 278], "create_st": 273, "ctest": 278, "ctrain": 278, "curr_cost": 274, "curr_ind": 274, "current": [100, 105, 150, 152, 153, 163, 165, 166, 176, 269, 271], "current_number_simulated_nod": [150, 152, 163, 165], "current_ord": [150, 160, 163, 173], "current_simulated_nod": [150, 153, 163, 166], "custom": 274, "cylind": 217, "cz_": 266, "c\u00f3rcole": 272, "d": [31, 37, 58, 59, 62, 63, 64, 67, 68, 74, 94, 95, 97, 99, 267, 272], "dagger": 276, "data": [0, 30, 31, 33, 34, 35, 71, 74, 75, 84, 88, 95, 97, 238, 239, 243, 271, 274, 276], "data_dictionari": 76, "data_dist": 273, "datadict": [35, 99], "datafram": 272, "dataset": [272, 273, 276], "datetim": 273, "ddict": [74, 84], "ddof": 277, "ddpg": 274, "deal": [0, 100, 203], "decai": 245, "decis": 272, "decreas": 274, "deep": [71, 95, 97, 267], "deepcopi": [71, 95, 97], "def": [272, 273, 274, 276, 277, 278], "default": [21, 30, 33, 34, 35, 37, 61, 64, 66, 71, 72, 74, 75, 82, 84, 85, 92, 97, 100, 176, 226, 245, 252, 259, 267, 268, 278], "default_measur": [100, 103, 267], "defin": [266, 267, 272, 274, 276, 277, 278], "deg_graph": 240, "degre": [21, 72], "degreeview": [21, 72], "delet": [37, 40, 100, 101], "demonstr": 274, "densiti": [0, 150, 175], "depend": [0, 221, 270], "depth": [100, 112, 212, 213], "descent": [0, 252, 253, 254, 255, 257], "describ": 226, "design": [30, 96, 98, 267], "detail": 274, "determin": [267, 271], "dev": 270, "dev1": 222, "dev_mod": 278, "develop": [271, 274, 277, 278], "dg": 99, "dict": [1, 8, 21, 24, 33, 35, 36, 37, 55, 65, 67, 71, 74, 81, 84, 91, 95, 97, 99, 100, 103, 118, 150, 163, 195, 203, 212, 213, 214], "dictionari": [21, 24, 30, 31, 32, 33, 34, 36, 37, 39, 60, 61, 66, 75, 84, 91], "differ": [71, 99, 267, 274], "digraph": [22, 24, 26, 27, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 75, 76, 77, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 231, 235], "digraph_expr": 235, "digraph_expressivity_of_flow_spac": 231, "dim_so": [0, 232], "dim_sp": [0, 233], "dim_su": [0, 234], "dimens": [0, 232, 233, 234], "direct": [21, 35, 36, 71, 74, 79, 85, 95, 96, 98], "directli": [1, 30, 82], "discrete_angl": 274, "discuss": 214, "diverg": 236, "divis": 245, "dm": [175, 269, 272, 274, 278], "dmytro": [271, 273], "do": [71, 84, 94, 95, 97, 276, 277, 278], "doc": [71, 95, 97, 270], "document": 270, "doe": [37, 67, 71, 74, 99, 269], "doesn": [32, 75], "don": [74, 84], "done": 274, "dpi": [274, 277, 278], "dqn": 274, "dqn_optim": 274, "dr": 271, "draw": [0, 200, 201, 216, 217, 218, 219, 220, 235, 267, 272, 276, 277], "draw_digraph_flow_spac": 235, "draw_with_wir": [0, 201, 278], "drop": 272, "dtype": 273, "duplic": [31, 34], "dure": [31, 33, 34, 91, 271], "e": [0, 30, 31, 33, 34, 37, 67, 74, 75, 76, 88, 91, 99, 216, 266, 267, 269, 270], "e_x": 278, "each": [21, 31, 34, 35, 72, 73, 84, 89, 92, 95, 219, 223, 267, 272], "ebunch": [21, 31, 89], "ebunch_to_add": [21, 31, 34], "edg": [21, 29, 30, 31, 34, 35, 69, 70, 71, 72, 73, 74, 75, 76, 82, 85, 88, 89, 90, 92, 94, 95, 97, 99, 100, 107, 108, 223, 266], "edge_attr_dict_factori": 21, "edge_color_control": 278, "edge_dict": 75, "edge_ind": 76, "edge_subgraph": [21, 73], "edgecolor": 272, "edgedataview": 74, "edgeview": [21, 74], "edit": 270, "effect": 31, "egraph": 226, "either": [37, 67, 99, 239, 276, 277], "ekei": 99, "element": 268, "elif": 278, "els": [37, 39, 61, 66, 94, 273], "embed": 272, "empti": [21, 65, 71, 74, 82, 96, 98], "enabl": 71, "encod": 272, "encourag": 270, "end": [183, 190, 278], "enhanc": [270, 272], "ensur": 270, "entangl": [267, 268], "entir": [71, 81, 84], "entropi": 236, "enumer": [272, 274, 277], "env": 274, "environ": 270, "ep": [245, 246, 274], "equival": [76, 84, 226, 267], "error": [31, 33, 34, 91, 270], "errorbar": 277, "estim": 236, "et": 272, "etc": [22, 24, 26, 27, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 74, 75, 76, 77, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97], "eval": 274, "evalu": [31, 33, 34, 91, 274], "even": 82, "everi": 33, "everyth": 270, "exactli": 71, "exampl": [21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 183, 190, 192, 216, 217, 218, 219, 220, 229, 245, 252, 259, 267, 276, 278], "except": [32, 75, 76, 90, 99], "exhaust": 82, "exist": [30, 31, 34, 74, 75, 226], "experi": 269, "explicit": 30, "explicitli": 267, "explor": 274, "exponenti": 267, "express": [84, 231, 235, 236, 271], "expressivity_with_histogram": 236, "extended_x": 273, "ey": [273, 274, 276, 278], "f": [37, 67, 245, 247, 248, 250, 252, 254, 255, 257, 259, 261, 262, 264, 267, 274, 277, 278], "factor": [226, 245, 251, 252, 258, 259, 265], "fail": [89, 91], "fals": [21, 22, 37, 39, 71, 74, 76, 79, 80, 84, 95, 97, 100, 119, 150, 157, 163, 170, 214, 217, 224, 243, 245, 247, 248, 252, 253, 254, 255, 259, 260, 261, 262, 273, 274, 278], "false_angl": 12, "false_plan": 12, "featur": [269, 270, 272], "feature1": 272, "feature2": 272, "feature_rang": 272, "feel": 271, "feldmann": [271, 273], "few": 272, "fid_test": 274, "fidel": [242, 272, 274, 276, 277, 278], "fidelity_test": 274, "field": 276, "fig": [272, 276, 277, 278], "figsiz": [220, 272, 278], "figur": [0, 200, 201, 216, 217, 218, 219, 220, 267, 272, 276, 277, 278], "fill_between": [276, 278], "final": [99, 267, 272, 274, 276, 277, 278], "find": [0, 203, 212, 213, 214, 271, 272, 274, 278], "find_cflow": [0, 212], "find_gflow": [0, 213], "find_pflow": [0, 214], "find_swap": [150, 154, 163, 167], "finish": 277, "first": [0, 65, 88, 99, 202, 244, 245, 273, 274, 277], "fisher_predict": 273, "fit": 272, "five": [21, 93, 100, 217, 218], "fix": [201, 269, 270, 276], "fix_wir": [201, 278], "float": [1, 2, 7, 10, 11, 12, 17, 19, 92, 125, 126, 130, 132, 150, 156, 162, 163, 169, 175, 176, 177, 180, 182, 195, 197, 199, 236, 238, 239, 243, 245, 252, 259], "flow": [100, 113, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 223, 224, 225, 235, 240, 267, 271], "flow_spac": [223, 231], "flowspac": [0, 223, 224, 225, 231], "focu": 272, "follow": [30, 37, 67, 76, 99, 270, 272, 276, 278], "fontana": 267, "fontsiz": [274, 276, 277], "foo": [29, 35, 74, 75, 84], "foovalu": 35, "force0": [150, 157, 163, 170], "form": [30, 75, 175, 226], "formul": 272, "found": [37, 64, 75, 214], "four": 71, "frac": 274, "framework": 271, "free": 271, "fresh": 71, "from": [0, 21, 30, 31, 33, 34, 37, 58, 60, 67, 69, 70, 74, 82, 84, 85, 88, 89, 91, 99, 100, 108, 183, 203, 205, 223, 235, 267, 271, 272, 274, 276, 277], "from_list": 274, "from_pauli": [0, 216], "fromkei": [37, 60], "full": [73, 274], "function": [1, 2, 100, 113, 122, 137, 138, 150, 163, 176, 177, 195, 203, 204, 212, 213, 214, 245, 247, 248, 252, 254, 255, 259, 261, 262, 267, 270, 271, 272, 276, 277, 278], "futur": [269, 274, 277, 278], "future_neighbors_in_wir": [150, 155, 163, 168], "g": [21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 216, 217, 218, 219, 220, 266, 267, 272, 274, 276, 277, 278], "g2": 97, "gao": 272, "gate": [0, 238, 239, 266, 267, 273, 274, 276, 277, 278], "gate2learn": [276, 277], "gen_stat": 273, "gener": [0, 21, 92, 93, 203, 210, 213, 227, 228, 230, 241, 270, 271, 273, 276, 278], "generate_data": 273, "generate_haar_random_st": [0, 237, 269, 273, 278], "generate_random_dataset": [0, 238, 276, 278], "generate_random_dataset_noisi": [0, 239, 277], "generator_op": [203, 210], "get": [37, 61, 84, 266, 268, 274, 278], "get_cmap": 274, "get_edge_data": [21, 75], "get_fish": 273, "get_optim": 273, "get_povm": [11, 17, 125, 130, 268], "get_prob": 273, "get_stochastic_batch": 273, "get_subset": [183, 192], "get_target": 273, "get_targets_or_fish": 273, "getattr": [37, 43], "gflow": 201, "git": 270, "github": [270, 271], "give": 76, "given": [0, 31, 34, 37, 64, 89, 100, 150, 160, 162, 163, 173, 175, 203, 205, 209, 210, 214, 222, 227, 228, 229, 230, 231, 238, 239, 241, 242, 267, 276], "global": [226, 274, 276, 278], "global_cost_cal": 274, "go": 223, "goal_selection_strategi": 274, "goalselectionstrategi": 274, "good": [270, 272], "gr": 266, "graph": [0, 21, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 103, 114, 201, 202, 203, 205, 212, 213, 214, 215, 216, 219, 220, 223, 224, 226, 236, 240, 242, 244, 271], "graph stat": 266, "graph1": 226, "graph2": 226, "graph_attr_dict_factori": 21, "graph_state_circuit": [236, 242], "graphstat": [0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 114, 200, 201, 203, 212, 213, 214, 267], "greedy_layer_optim": 274, "greedy_layer_optimizer_al": 274, "greedylayeroptim": 274, "green": [276, 277, 278], "grid": [0, 217, 229, 267], "grid_and_linear": 267, "grid_clust": [0, 217, 229, 267, 269], "grow": [31, 34], "guarante": 84, "guid": 270, "guidanc": 271, "guidelin": 270, "gym": 274, "gymnasium": 274, "h": [33, 71, 73, 94, 95, 97, 267, 272, 278], "ha": [31, 37, 39, 67, 71, 72, 84, 92, 99, 203, 205, 267], "haar": [0, 237, 276], "half_n": 273, "hamilt": 273, "hamiltonian": 273, "handl": [71, 270, 274], "happen": [31, 33, 34, 91], "hardwar": 269, "has_edg": [21, 76], "has_nod": [21, 77], "hash": [32, 183, 186], "hashabl": [30, 32, 76, 82], "have": [0, 74, 84, 95, 97, 99, 215, 267, 269, 272, 276, 277, 278], "havl\u00ed\u010dek": 272, "hello": [32, 33], "help": [1, 3, 37, 52, 137, 142, 150, 151, 163, 164, 176, 178, 195, 196], "henc": 74, "her": 274, "here": [273, 276], "heredg": 267, "herman": 267, "hgate": [273, 278], "hh": 273, "hi": 271, "high": 274, "high_bound": 274, "hilbert": 272, "histogram": 236, "hold": [21, 30, 35, 72, 92], "horizont": [0, 202], "hostedtoolcach": 235, "how": [266, 269, 270, 274, 276, 277], "hstack": [0, 202, 267], "html": [71, 95, 97, 270], "http": [71, 95, 97, 212, 213, 214, 270, 271], "human": 274, "i": [0, 11, 18, 21, 22, 24, 31, 32, 33, 34, 35, 37, 61, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 116, 125, 131, 150, 157, 159, 163, 170, 172, 176, 202, 203, 205, 214, 216, 220, 221, 222, 230, 244, 245, 250, 251, 252, 257, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "idea": [270, 272], "idealfish": 273, "ident": [27, 75, 77, 83, 86, 87], "identifi": [21, 81, 276], "idiom": 35, "idx": 273, "ignor": [74, 82, 89, 91, 99, 276], "ii": 192, "iii": 229, "iiizx": 93, "iix": 267, "iiz": [183, 192, 267], "iizxz": 93, "ij": 266, "implement": [0, 37, 47, 212, 213, 214, 216, 226, 267, 272, 274], "import": [99, 270, 272, 273, 274, 276, 277, 278], "improv": [201, 271], "incid": [72, 73, 82], "includ": [29, 32, 35, 36, 84, 270], "increas": 271, "independ": 71, "index": [100, 101, 102, 106], "index_map": [21, 78], "indic": [21, 78, 183, 192, 274, 278], "induc": [21, 73, 94, 276], "indx": 277, "infidel": [276, 277], "info": [29, 35, 274], "inform": [21, 25, 29, 35, 71, 95, 97, 267], "inherit": [0, 21], "initi": [1, 3, 9, 21, 25, 100, 103, 137, 142, 150, 151, 161, 163, 164, 174, 176, 178, 183, 187, 195, 196, 198, 203, 205, 211, 226, 245, 246, 252, 253, 259, 260, 268], "initialize_flow": [203, 211], "inplac": 94, "input": [0, 1, 5, 21, 99, 100, 115, 116, 150, 163, 195, 202, 203, 212, 213, 214, 221, 223, 238, 239, 243, 244, 267, 276], "input_kron": 278, "input_nod": [0, 100, 103, 115, 203, 205, 212, 213, 223, 224, 267], "input_st": [1, 3, 5, 9, 150, 151, 161, 162, 163, 164, 174, 176, 178, 181, 195, 196, 198, 269, 273, 274, 276, 277, 278], "input_state_random": 278, "inputc": [100, 116], "insert": [37, 66], "inspir": [71, 272], "instal": [274, 276, 277], "instead": [1, 71, 75], "int": [1, 10, 12, 27, 72, 85, 86, 87, 92, 100, 103, 104, 110, 111, 112, 115, 117, 118, 119, 120, 123, 124, 126, 150, 152, 153, 155, 158, 159, 162, 163, 165, 166, 168, 171, 172, 175, 176, 182, 192, 195, 199, 212, 213, 217, 218, 220, 223, 229, 236, 237, 238, 239, 241], "int64": 278, "integ": 72, "integr": 271, "intel": 272, "intend": 270, "interact": 274, "interfac": 84, "invalidvers": 222, "involv": 270, "is_direct": [21, 79], "is_multigraph": [21, 80, 94], "is_train": [11, 18, 125, 131], "ising_xx": [274, 276, 277], "isingxx": [276, 277], "isingxx_nois": 277, "issu": [271, 272, 276], "item": [32, 35, 37, 58, 62, 84, 94, 99], "iter": [21, 24, 26, 30, 31, 33, 34, 35, 36, 37, 47, 55, 60, 67, 72, 73, 74, 82, 83, 84, 91, 94, 99, 274, 276, 277, 278], "iter_to_nod": 274, "iterator_of_edg": [31, 34], "iterator_of_nod": [33, 91], "itertool": [99, 274], "its": [73, 94, 267, 270, 271], "ix": 183, "ixz": [229, 267], "iz": [183, 192], "izi": [183, 190, 192], "izx": 229, "izxzi": 93, "j": [266, 267, 268, 272], "join": 85, "just": [84, 94], "k": [37, 64, 67, 89, 272, 273, 274, 277], "k3": [32, 33], "kei": [30, 32, 33, 35, 37, 39, 40, 55, 57, 60, 61, 63, 64, 65, 66, 67, 81, 94, 100, 101, 102, 106, 183, 185, 203, 214], "kemper": 267, "kernel": 272, "ket": 278, "keydict": [94, 99], "keyerror": [37, 64, 65, 76], "keyword": [30, 31, 32, 33, 34, 84, 92, 99, 220, 269], "killoran": 272, "kl": [231, 236], "know": 267, "known": 268, "kron": [273, 274, 276, 278], "kullback": 236, "kumar": 267, "kwarg": [0, 1, 2, 7, 10, 11, 14, 17, 19, 20, 21, 25, 37, 52, 100, 108, 125, 130, 132, 137, 138, 150, 151, 163, 164, 175, 176, 177, 178, 180, 182, 195, 196, 199, 200, 201, 217, 218, 219, 220, 231, 235, 245, 247, 248, 250, 252, 254, 255, 256, 257, 259, 261, 262, 263, 264, 267, 278], "l": [33, 271, 276], "label": [30, 31, 203, 205, 267, 274, 276, 277, 278], "labels": [274, 276, 277], "lack": [37, 67], "lambda": [273, 274, 276, 277, 278], "larg": 268, "larger": [0, 202, 221, 244], "largest_wcc": 94, "larocca": 267, "last": [0, 65, 202, 244], "layer": [100, 119, 212, 213, 214, 220, 274], "layer_opt": 274, "lazili": [203, 211], "lc": 226, "lc_cluster_flowspac": 240, "lc_equival": 240, "learn": [266, 269, 271, 272, 273], "left": [267, 276, 278], "legend": [274, 276, 277, 278], "leiber": 236, "leibler": 236, "len": [21, 27, 37, 49, 267, 269, 273, 274, 276, 277, 278], "length": [30, 226], "less": 223, "let": [267, 269, 272, 274], "lett": 272, "letter": 267, "level": [71, 239], "lib": 235, "librari": [71, 95, 97, 270, 271], "lie": [0, 227, 228, 229, 241, 267, 271], "lie_alg": 229, "lie_algebra_complet": [0, 241], "lifo": 65, "like": [35, 37, 62, 63, 71, 74, 84, 94, 95, 97, 99, 271], "linalg": [273, 274], "line": [274, 276, 277], "line2d": 274, "linear": [0, 218], "linear_clust": [0, 218, 267, 278], "linearsegmentedcolormap": 274, "linestyl": [274, 276, 277, 278], "linspac": 274, "list": [0, 1, 2, 10, 26, 31, 33, 34, 69, 70, 72, 73, 84, 89, 90, 91, 94, 95, 97, 99, 100, 103, 108, 110, 111, 115, 116, 117, 119, 120, 121, 123, 124, 150, 153, 155, 158, 162, 163, 166, 168, 171, 175, 176, 177, 182, 183, 187, 192, 195, 199, 202, 203, 212, 213, 214, 219, 223, 226, 244, 276, 278], "list_of_wir": 278, "listedcolormap": 272, "ll": 272, "load": 277, "loc": 278, "local": [226, 270, 276], "log": 273, "logic": 267, "look": [94, 270], "lookup": [72, 74, 84], "loop": 277, "loss": [276, 277, 278], "loss_valu": 274, "loss_value_test": 274, "low": 274, "low_bound": 274, "lower": 278, "lui": [271, 272, 273, 274, 276], "m": [0, 217, 267, 270, 271, 272], "m1": 268, "m2": 268, "mach": 272, "machin": [271, 272, 276], "mai": [71, 99], "main": 267, "major": [274, 276, 277], "make": [0, 94, 237, 270], "make_blob": 272, "mani": [0, 30, 32, 219], "manipul": [0, 100, 271], "mantilla": [271, 272, 273, 274, 276], "mantilla2023mentpi": 271, "many_wir": [0, 219, 278], "map": [21, 72, 78, 267, 272, 277, 278], "mapsto": 272, "marker": 274, "markers": 274, "markeveri": 274, "marrero": 267, "mathbb": [267, 278], "mathcal": 278, "mathfrak": [0, 232, 233, 234, 267], "matplotlib": [272, 274, 276], "matric": [0, 183], "matrix": [0, 11, 19, 125, 132, 150, 175, 183, 267, 268], "max": [272, 274], "max_cost_cal": 274, "max_it": [229, 241, 274], "max_lay": 274, "max_num_run": 278, "max_num_step": 278, "maximum": [276, 278], "mb": [272, 274], "mb-qml": [272, 273, 276], "mb-vqe": 275, "mbcirc": 267, "mbqc": [0, 1, 6, 10, 21, 100, 105, 110, 111, 112, 113, 115, 117, 118, 119, 120, 122, 123, 124, 150, 163, 176, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 244, 266, 268, 271, 272, 273, 276], "mbqcircuit": [1, 3, 6, 21, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 150, 151, 163, 164, 176, 178, 195, 196, 200, 201, 202, 216, 217, 218, 219, 220, 221, 223, 227, 228, 229, 230, 236, 242, 244, 267, 269, 276], "mcolor": 274, "mdg": 99, "mean": [276, 277, 278], "means_test": 277, "means_train": 277, "measur": [0, 1, 7, 10, 11, 12, 16, 17, 18, 19, 100, 101, 102, 103, 106, 109, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 150, 156, 157, 162, 163, 169, 170, 175, 176, 180, 195, 197, 199, 203, 214, 236, 267, 269, 271, 272, 274, 276, 278], "measure_": [150, 157, 163, 170], "measurement-based quantum comput": [266, 267, 268, 269, 274, 278], "measurement-based quantum machine learn": [272, 273, 276], "measurement-based vq": 275, "measurement_ord": [100, 117, 274], "membership": 82, "memori": 71, "ment": [100, 103, 118, 125, 150, 157, 163, 170, 268, 269, 276, 277, 278], "mention": 272, "mentoutcom": [0, 11, 12, 125, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "mentpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278], "merg": [0, 221, 267, 278], "merged_lay": 274, "meshgrid": 272, "messag": [31, 33, 34, 91], "method": [27, 67, 71, 85, 86, 87, 95, 97, 99, 231, 236, 266, 268, 270], "metric": 272, "mg": 278, "mid": 267, "might": [71, 274, 277, 278], "min": 272, "minmaxscal": 272, "mla": 271, "mline": 274, "mlppolici": 274, "mode": [150, 156, 157, 162, 270, 274], "model": [267, 271, 272, 274, 276, 277], "model_class": 274, "model_select": 272, "modifi": [31, 33, 34, 91], "modul": [71, 95, 97, 235, 267], "moment": [245, 267], "momentum": [259, 260, 273], "more": [21, 25, 71, 77, 92, 94, 95, 97, 271, 272], "most": 94, "mp": [1, 21, 93, 100, 176, 183, 190, 192, 195, 203, 212, 213, 214, 216, 217, 218, 219, 220, 229, 245, 252, 259, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278], "multidigraph": [22, 24, 26, 27, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 75, 76, 77, 83, 86, 87, 89, 90, 91, 92, 94, 95, 99], "multigraph": [21, 22, 24, 26, 27, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 74, 75, 76, 77, 80, 83, 86, 87, 89, 90, 91, 92, 94, 95, 97, 99], "multipl": [0, 21, 33, 34, 72, 91, 99, 220], "multiprocess": 277, "must": [30, 31, 34, 76, 99], "muta": [0, 220, 272, 274, 276, 277], "mutabl": 32, "my_callback": 274, "mygat": 274, "n": [0, 21, 22, 24, 26, 31, 33, 34, 35, 36, 77, 83, 84, 90, 91, 94, 203, 205, 217, 218, 226, 232, 233, 234, 266, 267, 272, 273, 274, 276], "n_bin": 236, "n_layer": [0, 220], "n_qubit": [0, 223, 224, 237], "n_sampl": [236, 237, 238, 239, 242, 272], "n_state": 273, "n_step": 274, "n_wire": [0, 219, 220], "name": [21, 29, 34, 37, 43, 69, 72, 81, 95, 272], "nan_to_num": 272, "nat": 272, "natur": 272, "nbr": [35, 94, 99], "nbrdict": 36, "nbunch": [21, 72, 74, 82], "nbunch_it": [21, 82], "ndarrai": [0, 1, 3, 5, 10, 150, 151, 161, 162, 163, 164, 174, 175, 176, 178, 181, 182, 183, 187, 195, 196, 199, 237, 238, 239], "necessari": 270, "nedg": 85, "need": [84, 203, 211, 267, 269, 274, 276, 277], "neighbor": [0, 21, 24, 35, 36, 83, 150, 158, 163, 171, 215], "neighbors_in_wir": [150, 158, 163, 171], "nesterov": [259, 260], "network": 272, "networkx": [0, 21, 25, 30, 32, 71, 235], "networkxerror": [82, 83, 88, 90], "neural": 272, "never": 84, "new": [0, 31, 34, 37, 52, 60, 71, 202, 221, 244, 270, 274], "new_angl": 274, "new_circ": 267, "new_cost": 274, "next": 276, "niter": [26, 82], "nnode": [27, 86, 87], "node": [0, 21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 90, 91, 94, 95, 97, 99, 100, 101, 102, 104, 106, 107, 110, 111, 115, 116, 120, 121, 123, 124, 150, 152, 153, 155, 158, 159, 163, 165, 166, 168, 171, 172, 201, 203, 204, 205, 207, 209, 210, 212, 213, 214, 215, 223, 230, 266, 267, 269, 278], "node_attr_dict_factori": 21, "node_dict_factori": 21, "node_for_ad": [21, 32], "node_id": [11, 125, 133, 137, 142, 149], "node_in_which_wir": [150, 159, 163, 172], "nodedata": 84, "nodedataview": 84, "nodes_for_ad": [21, 33], "nodeview": [21, 84], "nois": [0, 239, 276, 277], "noise_level": [0, 239, 277], "noise_lvl": 277, "noise_typ": [239, 277], "noisi": 271, "non": 30, "none": [1, 3, 9, 11, 12, 17, 19, 21, 30, 32, 37, 58, 60, 61, 66, 67, 72, 74, 75, 76, 82, 84, 85, 92, 99, 103, 125, 126, 130, 132, 137, 142, 150, 151, 161, 162, 163, 164, 174, 176, 178, 181, 195, 198, 201, 203, 205, 245, 247, 248, 252, 254, 255, 259, 261, 262, 267, 268, 272, 273, 274], "nonexist": 90, "norm": 273, "normal": 272, "notabl": 272, "notat": 30, "note": [24, 30, 31, 32, 33, 34, 71, 73, 74, 82, 83, 84, 89, 91, 94, 95, 97, 99, 223], "now": [269, 270, 272, 273, 274, 276, 278], "np": [1, 183, 195, 239, 268, 269, 272, 273, 274, 276, 277, 278], "npy": 277, "num_angl": 269, "num_color": 274, "num_data": 273, "num_it": [245, 247, 248, 252, 254, 255, 259, 261, 262, 274, 276, 277, 278], "num_nod": 274, "num_run": [274, 276, 277], "num_step": [273, 276, 277], "number": [0, 21, 27, 29, 30, 32, 34, 72, 76, 85, 86, 87, 92, 100, 104, 150, 152, 163, 165, 183, 193, 203, 205, 215, 217, 218, 219, 220, 223, 236, 239, 245, 266], "number_of_edg": [21, 85, 92], "number_of_nod": [21, 27, 32, 86, 87], "number_of_qubit": [183, 193], "numer": [30, 72, 92], "numpi": [0, 150, 163, 226, 269, 272, 273, 274, 276, 278], "numpysimulatordm": [0, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 269], "numpysimulatorsv": [0, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "nx": [22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99], "o": [0, 33, 100, 121, 214, 273, 274], "object": [0, 21, 30, 31, 32, 33, 34, 35, 37, 52, 62, 63, 68, 71, 72, 74, 75, 76, 82, 91, 95, 97, 99, 183, 187, 212, 213, 231, 245, 252, 259, 267, 268, 269, 278], "observ": 274, "observation_spac": 274, "obtain": [71, 99], "odd": [0, 215], "odd_neighborhood": [0, 215], "onc": 94, "one": [0, 1, 31, 32, 34, 71, 73, 82, 220, 223, 237, 274, 276, 278], "one_column": [220, 272, 274, 276, 277], "onli": [35, 36, 71, 72, 73, 74, 82, 84, 85, 99, 176, 220, 223, 267], "op": [183, 187, 192, 267], "op1": 190, "op2": 190, "open": [270, 271], "oper": [11, 12, 19, 74, 84, 100, 125, 126, 183, 188, 190, 191, 192, 193, 194, 203, 209, 210, 216, 226, 228, 241, 266, 268, 276], "operatornam": [277, 278], "opt": [235, 245, 252, 259, 273, 274, 276, 277, 278], "opt_nam": 273, "optim": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 273, 276, 277, 278], "optimize_and_gradient_norm": [245, 248, 252, 255, 259, 262], "option": [30, 31, 32, 33, 34, 71, 72, 74, 84, 85, 92, 97, 245, 252, 259, 268, 274], "order": [0, 21, 27, 65, 86, 87, 100, 109, 117, 122, 150, 160, 163, 173, 212, 213, 230], "ordered_lay": [100, 119, 274], "org": [71, 95, 97, 212, 213, 214], "origin": [71, 73, 94, 97], "ortiz": 267, "other": [21, 23, 71, 137, 139, 140, 141, 143, 144, 145, 146, 183, 184, 188, 190, 191, 194, 267], "otherwis": [21, 22, 37, 64, 76, 79, 80, 84, 85, 92, 214], "otim": [266, 276, 278], "our": [274, 276, 277], "out": [65, 74, 94, 216, 217, 218, 219, 220, 267, 268, 269, 270, 272, 274, 276, 277, 278], "outcom": [0, 1, 8, 11, 125, 134, 137, 142, 150, 163, 195, 203, 208, 278], "outer": [274, 278], "outgo": [35, 36], "output": [0, 100, 110, 120, 121, 123, 175, 202, 203, 212, 213, 214, 221, 223, 226, 244, 274, 276, 277, 278], "output_form": 175, "output_nod": [100, 103, 120, 203, 205, 212, 213, 223, 224, 267, 278], "output_st": 269, "outputc": [100, 121, 278], "outputs_test": 274, "over": [0, 21, 24, 26, 31, 33, 34, 35, 36, 37, 55, 74, 82, 83, 84, 91, 223, 237, 274, 276, 277], "own": [73, 94], "p": [0, 214, 216, 272, 274, 276, 277], "p0": 268, "p00": 273, "p1": 268, "p11": 273, "p_op": 216, "packag": [235, 270, 271, 274, 277], "pair": [37, 65, 84], "panda": 272, "paradigm": [267, 268], "parallel": 276, "parallel_run": 273, "parallel_run_wrapp": 273, "param": [226, 276, 277], "paramet": [1, 7, 10, 24, 30, 31, 32, 33, 34, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 97, 99, 100, 156, 169, 175, 176, 183, 192, 195, 197, 199, 203, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 230, 231, 236, 239, 245, 252, 259, 267, 268, 276], "parametr": [0, 239, 267, 271, 276], "pars": 222, "parse_vers": 222, "part": 88, "partial": [100, 122, 212, 213], "partial_ord": [100, 122, 212, 213], "particular": [266, 269, 278], "pass": [31, 33, 34, 91, 274], "path": 31, "path_graph": [22, 24, 26, 27, 29, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99], "pathcollect": 272, "patho": 277, "pattern": [0, 150, 162, 163, 175, 176, 195, 274, 276, 278], "pattern_simul": 273, "patternsimul": [0, 1, 176, 177, 178, 179, 180, 181, 182, 195, 269, 272, 274, 276, 277, 278], "pauli": [0, 183, 188, 190, 191, 192, 193, 194, 216, 241, 268], "pauli_op": [0, 216], "pauliop": [0, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 216, 230, 241], "pd": 272, "pdf": [212, 213, 214], "pennylan": [176, 178, 242], "pennylanesimul": [0, 1, 176, 195, 196, 197, 198, 199], "peopl": 71, "pep": [37, 38], "percentag": 239, "perform": [267, 268, 273, 274], "period": 217, "permit": 75, "ph": 226, "phase": 273, "phenomenon": 267, "phi": 272, "phy": 272, "physic": 267, "pi": [268, 273, 274, 276, 277, 278], "pickl": 273, "pip": [274, 276, 277], "pistoia": 267, "plane": [0, 11, 20, 125, 126, 135, 195, 197, 203, 205, 214, 267, 268], "plateau": [267, 276], "platform": 32, "pleas": 271, "plot_progress": 274, "plt": [272, 274, 276, 277, 278], "png": [274, 277, 278], "polina": [271, 273], "polycoeff": 273, "polydeg": 273, "pool": 277, "pop": [37, 64], "popitem": [37, 65], "posit": [267, 278], "possibl": [223, 230, 278], "possibli": [82, 94], "post_cost": [276, 278], "post_cost_test": 277, "post_cost_train": 277, "povm": [11, 17, 125, 130, 268], "power": [99, 267, 272], "practic": 272, "pre": [267, 278], "preced": [31, 33], "pred": 99, "predecessor": 99, "predict": [272, 274, 276, 277, 278], "prediction_single_st": [276, 277], "prepar": [267, 274], "preprint": 267, "preprocess": 272, "present": [37, 67, 84], "previou": [269, 272, 277], "previous_outcom": [203, 207], "print": [21, 93, 183, 190, 192, 229, 245, 252, 259, 266, 267, 268, 269, 272, 274, 277, 278], "prob_predict": 273, "probabl": 242, "problem": [276, 278], "process": [82, 270, 272, 276], "processingpool": 277, "prod_": 266, "produc": 226, "product": [183, 188, 194, 274], "progress": 274, "project": 271, "properti": [5, 6, 8, 15, 35, 72, 74, 81, 84, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 128, 133, 134, 135, 148, 149, 193, 203, 211], "provid": [35, 37, 62, 63, 68, 71, 72, 74, 84, 92, 99, 267, 274, 276], "psi": 266, "psk": 278, "pull": 271, "pure2dens": [276, 277], "push": 270, "py": 235, "pypi": 270, "pyplot": [272, 274, 276], "pyproject": 270, "pytest": 270, "python": [30, 32, 71, 75, 76, 95, 97, 235, 270, 271], "python3": [235, 270], "pyzx": 271, "q": 272, "qdensiti": 273, "qml": [267, 271, 272, 273, 274], "quant": 226, "quantum": [0, 150, 162, 163, 175, 266, 267, 268, 271, 272, 273, 275, 276], "quantum comput": [266, 267, 268, 269], "quantum machine learn": [274, 275, 276, 278], "quantum_kernel": 272, "quantum_output_nod": [100, 123, 278], "quantum_st": 278, "quantumgymenviron": 274, "qubit": [0, 21, 93, 100, 150, 160, 163, 173, 176, 183, 193, 217, 218, 219, 223, 226, 266, 267, 269, 272, 276], "quietli": 74, "r": [267, 274, 276, 277, 278], "ragon": 267, "rais": [31, 33, 34, 37, 64, 65, 82, 83, 88, 90, 91, 99, 222], "rand": [269, 273, 274, 276, 277, 278], "randint": 273, "random": [0, 237, 238, 239, 243, 252, 253, 254, 255, 257, 269, 273, 274, 276, 277, 278], "random_st": [269, 272], "random_su": 276, "random_train_test_states_unitari": 274, "rang": [31, 99, 273, 274, 276, 277, 278], "rangl": [266, 272], "rate": 245, "rather": 267, "raussendorf": [267, 271], "ravel": 272, "rcd": [252, 273], "rcdopt": [0, 252, 253, 254, 255, 256, 257, 258, 273], "re": [236, 270], "reach": 274, "read": [35, 71, 73], "readabl": 77, "real": [269, 273], "red": [74, 272], "reduct": 94, "refer": [71, 73, 95, 97, 212, 213, 214], "reflect": 94, "regular": 273, "reinforc": 274, "rel": 236, "relabel_indic": 103, "relat": [267, 276], "relev": [74, 84], "remov": [0, 21, 37, 58, 64, 65, 69, 70, 88, 89, 90, 91, 94, 223, 228], "remove_edg": [21, 88, 89], "remove_edges_from": [21, 88, 89], "remove_nod": [21, 90, 91], "remove_nodes_from": [21, 90, 91, 94], "render": 274, "reorder": [150, 160, 163, 173], "reorder_qubit": [150, 160, 163, 173], "repeat": [0, 228, 274], "replac": [95, 276], "report": [72, 74, 82, 84], "repositori": 270, "repr": [1, 4, 11, 13, 21, 28, 37, 54, 125, 127, 137, 147, 150, 163, 176, 179, 183, 189, 195, 203, 206], "repres": [0, 183, 223, 266, 268], "represent": [17, 95, 105, 130, 132, 225], "reproduc": 71, "request": [72, 74, 84, 271], "requir": [71, 99, 270, 274], "research": 271, "reset": [1, 9, 150, 161, 163, 174, 176, 181, 195, 198, 245, 249, 252, 256, 259, 263, 269, 272, 273, 274, 276, 277, 278], "reshap": 272, "resourc": [100, 114, 266, 267, 268, 271], "respect": 219, "rest": 84, "result": [71, 273, 276], "retriev": 271, "return": [0, 1, 4, 11, 13, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 36, 37, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 92, 94, 95, 96, 97, 98, 100, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 137, 139, 140, 141, 143, 144, 145, 146, 147, 150, 152, 153, 158, 159, 163, 165, 166, 171, 172, 176, 179, 183, 184, 186, 188, 189, 191, 192, 193, 194, 195, 203, 206, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 230, 231, 236, 238, 239, 267, 272, 273, 274, 276, 277, 278], "return_fish": 273, "rev": 272, "revers": [37, 55], "review": [267, 270], "reward": 274, "rho": 278, "rho_": 274, "rho_i": 276, "right": [267, 276, 278], "rightarrow": 278, "robert": 271, "robust": 276, "rotat": [216, 230, 268], "round": 277, "routin": 82, "row": 217, "rule": 94, "run": [1, 10, 150, 162, 163, 175, 176, 182, 195, 199, 270, 274, 276, 277], "runs_test": [274, 276, 277, 278], "runs_test_arrai": [276, 278], "runs_train": [274, 276, 277, 278], "runs_train_arrai": [276, 278], "runtimeerror": [31, 33, 34, 91], "sac": 274, "safe": 75, "same": [24, 31, 33, 34, 73, 76, 91, 95, 150, 158, 163, 171, 267, 274], "sampl": [150, 156, 157, 162, 236, 239, 242], "sample_probability_density_of_fidel": 242, "sanity_check": 240, "sauvag": 267, "save": [71, 277], "savefig": [274, 277, 278], "sc": 271, "scaler": 272, "scatter": 272, "schedul": 278, "schuld": 272, "sci": 272, "scipi": 274, "scratch": 276, "seaborn": [276, 277], "second": [99, 245], "see": [3, 25, 37, 38, 52, 95, 137, 142, 150, 151, 163, 164, 178, 196, 266, 267, 270, 276, 277], "seed": [273, 274], "select": 88, "self": [1, 2, 3, 4, 11, 13, 21, 23, 28, 31, 34, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 74, 82, 125, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 163, 164, 176, 177, 178, 179, 183, 184, 186, 189, 195, 196, 203, 204, 206, 274], "sem_test": 277, "sem_train": 277, "sens": 94, "separ": [31, 33, 34, 91], "sequenc": [82, 267], "set": [0, 11, 32, 33, 35, 37, 57, 60, 62, 63, 74, 84, 91, 94, 99, 100, 106, 125, 136, 215, 241, 243, 266, 267, 270, 272], "set_angl": [11, 125, 136], "set_facecolor": 272, "set_styl": 276, "set_titl": [276, 277], "set_xlabel": [276, 277], "set_ylabel": [276, 277], "setdefault": [37, 66], "sever": 272, "sg": 94, "sgd": [0, 259, 260, 261, 262, 264, 273], "sgdopt": [0, 245, 259, 260, 261, 262, 263, 264, 265, 273], "shallow": [37, 59, 71, 95, 97], "shape": [269, 272], "share": [71, 94], "short": [21, 29], "should": [1, 32, 99, 274], "show": [272, 274, 276, 278], "shown": 267, "sigma_i": [274, 276], "signatur": [1, 3, 37, 52, 137, 142, 150, 151, 163, 164, 176, 178, 195, 196], "significantli": 277, "silent": [82, 89, 91], "similar": [24, 95, 97, 277], "similarli": 99, "simmon": 214, "simpl": [84, 272], "simpler": [77, 84], "simpli": [34, 94, 269], "simul": [1, 5, 6, 8, 9, 150, 152, 153, 161, 163, 165, 166, 174, 176, 195, 198, 267, 271], "sin": 273, "sinc": 91, "singl": [21, 30, 31, 32, 34, 72, 74, 82, 89, 226, 267], "singleton": 99, "site": 235, "size": [21, 31, 32, 33, 34, 85, 91, 92, 216, 217, 218, 219, 220, 245, 251, 252, 258, 259, 265, 267, 276, 277, 278], "sklearn": 272, "slightli": 99, "small": [245, 278], "sn": 276, "so": [0, 35, 71, 226, 232], "softwar": 271, "solv": 276, "some": [84, 99, 267, 276], "sometim": 94, "sort": 33, "sourc": [150, 154, 163, 167, 271], "sp": [0, 233], "space": [0, 223, 224, 225, 235, 272, 274], "special": 214, "specif": [33, 84, 226], "specifi": [21, 30, 31, 33, 34, 37, 39, 64, 73, 84, 85, 89, 99, 267, 269, 270], "speed": 277, "split": [0, 243, 272], "sqrt": [273, 277], "sqrtm": 274, "st": [273, 274, 276, 277], "st0": 278, "stab": 266, "stabil": [21, 93], "stable_baselines3": 274, "stack": [0, 202, 244], "standard": 267, "state": [0, 1, 5, 7, 9, 10, 21, 25, 93, 100, 103, 105, 114, 150, 156, 160, 161, 162, 163, 169, 173, 174, 175, 195, 197, 198, 199, 200, 201, 202, 203, 205, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 226, 229, 230, 236, 237, 242, 244, 267, 268, 269, 271, 273, 274, 276, 277, 278], "state1": [0, 221, 272, 273], "state2": [0, 221, 272, 273], "state_zero": 278, "state_zero_product": 278, "statek": [274, 277, 278], "states_1": 273, "states_2": 273, "statesi": [274, 276, 277, 278], "statesx": [274, 276, 277, 278], "statevector": 175, "std": [276, 277, 278], "step": [245, 250, 251, 252, 257, 258, 259, 264, 265, 273, 274, 276, 278], "step_siz": [245, 246, 252, 253, 259, 260, 273, 276, 277, 278], "steps_nois": 277, "steps_run": 274, "stochast": 273, "store": [34, 278], "str": [1, 4, 11, 12, 13, 29, 33, 100, 105, 126, 137, 147, 150, 163, 175, 176, 179, 183, 187, 195, 197, 222, 223, 225, 231, 236, 239], "straightforward": 99, "strength": 277, "string": [0, 29, 30, 32, 34, 72, 74, 76, 81, 84, 92, 222, 226, 268], "structur": [35, 71, 94, 95, 97, 99], "studi": [267, 272, 276], "sty": [274, 276, 277, 278], "style": [71, 276, 277, 278], "su": [0, 234], "subclass": [1, 95, 96, 97, 98], "subgraph": [21, 73, 94], "submit": 270, "subplot": [272, 276, 277, 278], "subscript": [30, 35], "subset": [183, 192], "successor": 35, "suit": 270, "sum": [72, 92, 273, 274], "sum_": 278, "sum_i": 274, "summari": [21, 29], "super": 274, "supervis": 272, "supervisor": 271, "support": [176, 201, 267, 269, 271], "sureshbabu": 267, "sutter": 272, "suzuki": 272, "sv": 175, "svc": 272, "svm": 272, "symplect": [183, 194], "symplectic_prod": [183, 194], "syntax": 76, "synthesi": 272, "system": [1, 7, 10, 150, 156, 163, 169, 195, 197, 199, 267, 274, 278], "t": [32, 74, 75, 84, 273, 274, 276], "take": [31, 33, 99, 245, 250, 252, 257, 259, 264, 272], "taken": 99, "target": [0, 150, 154, 163, 167, 238, 239, 243, 272, 273, 274, 276, 277, 278], "target_ord": [150, 160, 163, 173], "task": 272, "td3": 274, "technic": 81, "teleport": [267, 278], "teleportlearningcurv": 278, "temm": 272, "templat": [216, 217, 218, 219, 220, 229, 269, 272, 274, 276, 277, 278], "tensor": 226, "tensor_00": 273, "tensor_01": 273, "tensor_10": 273, "tensor_11": 273, "test": [0, 82, 238, 239, 243, 272, 273, 274, 276, 277, 278], "test_": 277, "test_lin": 274, "test_low": [276, 278], "test_mean": [276, 278], "test_round": 277, "test_siz": [238, 239, 243, 272, 273, 276, 277, 278], "test_std": [276, 278], "test_upp": [276, 278], "tgate": 274, "th": [0, 230], "than": [94, 223], "thank": [214, 271], "thei": [30, 71, 99, 226], "theori": 267, "theta": [0, 216, 267, 273, 274, 276, 277, 278], "theta_op": 278, "thetas_op": 274, "thi": [0, 1, 31, 32, 33, 34, 35, 37, 67, 69, 71, 72, 73, 74, 75, 76, 81, 82, 83, 85, 91, 95, 96, 97, 98, 99, 202, 203, 214, 220, 221, 244, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "those": [71, 73, 85, 94, 95, 97, 99, 270], "though": [32, 76], "three": 219, "threshold": 274, "through": [74, 94, 267], "tick_param": [274, 276, 277], "tight": 274, "tight_layout": 277, "time": [71, 84, 274], "titl": [271, 274, 276, 278], "to_direct": [21, 71, 95, 96, 97, 98], "to_directed_class": [21, 96], "to_undirect": [21, 97], "to_undirected_class": [21, 98], "todo": 201, "toml": 270, "tool": [267, 271], "total": [21, 85, 92], "total_it": 274, "total_timestep": 274, "tr": 278, "train": [0, 238, 239, 243, 271, 272, 274, 276, 277, 278], "train_": 277, "train_indic": [100, 119, 274], "train_lin": 274, "train_low": [276, 278], "train_mean": [276, 278], "train_model": 274, "train_round": 277, "train_std": [276, 278], "train_test_split": [0, 243, 272, 273], "train_upp": [276, 278], "trainabl": [0, 11, 18, 100, 124, 125, 131, 230, 267, 268, 269], "trainable_nod": [100, 124, 269, 274, 276, 277, 278], "training_progress": 274, "transfer": [95, 97], "transform": 272, "treat": [99, 267], "triangl": [0, 220], "true": [11, 18, 21, 22, 33, 37, 39, 71, 74, 76, 77, 79, 80, 84, 97, 103, 125, 131, 214, 217, 240, 272, 273, 274, 276, 277, 278], "true_angl": 12, "true_plan": 12, "try": 269, "tupl": [0, 1, 10, 12, 21, 30, 31, 32, 33, 34, 36, 37, 65, 74, 75, 76, 84, 88, 89, 99, 100, 108, 126, 150, 156, 162, 163, 169, 175, 176, 182, 195, 199, 200, 201, 238, 239, 243], "tutori": [266, 269, 272, 273, 274, 275, 276, 277, 278], "tweak": 99, "twice": [31, 34], "two": [0, 21, 30, 76, 84, 85, 95, 99, 183, 188, 191, 194, 221, 226, 267, 276], "two_deg_poli": 273, "type": [1, 3, 24, 26, 27, 29, 36, 37, 52, 71, 72, 73, 74, 75, 76, 82, 83, 84, 85, 86, 87, 92, 94, 95, 97, 137, 142, 150, 151, 163, 164, 176, 178, 195, 196, 216, 217, 218, 219, 220, 226, 230, 236, 239, 266], "u": [0, 21, 30, 31, 34, 74, 75, 76, 85, 88, 89, 95, 99, 100, 107, 216, 271, 276], "u_": 276, "u_of_edg": [21, 30], "under": [270, 271, 272, 273, 274, 275, 277, 278], "underli": [31, 33, 34, 91], "undirect": [21, 85, 97, 98], "unifi": 267, "union": 183, "unitari": [0, 238, 239, 276], "univers": [267, 276], "unless": 99, "unpack": 88, "up": [270, 277], "updat": [21, 30, 31, 32, 33, 34, 37, 67, 94, 99, 245, 251, 252, 258, 259, 265], "update_step_s": [245, 251, 252, 258, 259, 265], "upgrad": [274, 276, 277], "url": 271, "us": [0, 1, 6, 21, 22, 24, 26, 27, 30, 31, 32, 33, 34, 35, 71, 72, 73, 74, 76, 77, 82, 84, 91, 92, 94, 95, 96, 97, 98, 99, 150, 163, 175, 176, 195, 214, 220, 236, 245, 247, 248, 252, 254, 255, 257, 259, 261, 262, 266, 267, 268, 269, 271, 272, 274, 276, 277, 278], "user": [81, 270], "usual": [74, 278], "util": [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 267, 269, 273, 274, 276, 277, 278], "utm": 32, "uuid": 273, "v": [21, 30, 31, 34, 37, 64, 67, 74, 75, 76, 85, 88, 89, 95, 99, 100, 107, 272], "v_of_edg": [21, 30], "valid": 222, "valu": [21, 23, 30, 32, 35, 37, 41, 42, 45, 46, 48, 50, 51, 53, 56, 57, 60, 61, 64, 65, 66, 68, 72, 74, 75, 82, 84, 92, 100, 102, 106, 137, 139, 140, 141, 143, 144, 145, 146, 183, 184, 203, 214, 274, 276, 278], "variational quantum eigensolv": 275, "vector": [0, 163], "verbos": [245, 247, 248, 252, 254, 255, 259, 261, 262, 274], "verifi": 270, "version": [71, 73, 222, 270, 271, 274, 277, 278], "vertic": [0, 244], "via": [31, 33, 223], "view": [21, 37, 62, 63, 68, 71, 72, 73, 74, 82, 84, 94, 97, 274], "viridi": 274, "visual": [272, 274], "vstack": [0, 244, 267], "w": 34, "wa": 214, "wai": [31, 33, 34, 71, 83, 84, 267, 272], "want": [71, 94, 99, 267, 269], "warn": [75, 95, 97], "we": [236, 266, 267, 268, 269, 272, 273, 274, 276, 277, 278], "web": [270, 271], "weight": [21, 30, 31, 32, 33, 34, 72, 74, 75, 76, 83, 84, 88, 92, 99], "well": [71, 72, 74, 81, 84], "what": [71, 94, 96, 98], "when": [31, 33, 34, 74, 82, 84, 91, 99, 201, 203, 211, 222, 267, 272, 277], "where": [31, 34, 84, 89, 94, 203, 205, 266, 268, 276, 278], "whether": [82, 220, 226, 252, 259], "which": [24, 74, 84, 94, 95, 97, 150, 159, 163, 172, 230, 236, 267, 268, 270, 274, 276, 277], "while": [71, 74], "white": [272, 276], "who": 270, "wil": 276, "window_s": [272, 274, 278], "wire": [0, 150, 158, 159, 163, 171, 172, 219, 220, 278], "wish": 270, "without": [21, 70, 71, 76, 201], "wn2898": 31, "work": [35, 91, 223, 274, 277], "worker_id": 273, "worst": 274, "worst_case_lin": 274, "would": 271, "wrong": [31, 33, 34], "x": [0, 12, 37, 44, 217, 245, 250, 251, 252, 257, 258, 259, 264, 265, 267, 268, 272, 273, 274, 276, 277, 278], "x0": [245, 247, 248, 252, 254, 255, 259, 261, 262], "x64": 235, "x_i": 272, "x_j": 272, "x_max": 272, "x_min": 272, "x_scaler": 272, "x_test": [272, 273, 274, 276, 277, 278], "x_train": [272, 273, 274, 276, 277, 278], "x_train_np": 272, "xi": 183, "xiz": [183, 190, 192], "xlabel": [274, 278], "xx": 272, "xy": [12, 103, 126, 195, 197, 203, 267, 268], "xyi": 216, "xyz": 229, "xz": [192, 267], "xzi": 229, "xziii": 93, "xzx": 229, "xzz": [190, 266], "y": [37, 44, 267, 272, 273, 274], "y_max": 272, "y_min": 272, "y_pred": 272, "y_test": [272, 273, 274, 276, 277, 278], "y_train": [272, 273, 274, 276, 277, 278], "y_train_np": 272, "yalovetzki": 267, "yano": 272, "year": 271, "yerr": 277, "yield": [74, 82, 99], "ylabel": [274, 278], "ylim": 274, "you": [31, 33, 34, 71, 84, 85, 91, 94, 95, 96, 97, 98, 99, 267, 269, 270, 271, 272, 274, 276, 277], "your": [84, 99, 270, 271], "yy": 272, "yyi": 229, "yz": 267, "z": [266, 267, 272, 278], "zero": [245, 269, 272, 273, 278], "zi": [183, 192], "zii": [183, 192], "zip": [31, 274, 276, 277, 278], "zoufal": 272, "zxi": 229, "zxz": [229, 266], "zxzii": 93, "zyx": 229, "zzx": 266, "\u03b8": [103, 267], "\u03c0": 276}, "titles": ["Operators", "mentpy.BaseSimulator", "mentpy.BaseSimulator.__call__", "mentpy.BaseSimulator.__init__", "mentpy.BaseSimulator.__repr__", "mentpy.BaseSimulator.input_state", "mentpy.BaseSimulator.mbqcircuit", "mentpy.BaseSimulator.measure", "mentpy.BaseSimulator.outcomes", "mentpy.BaseSimulator.reset", "mentpy.BaseSimulator.run", "mentpy.ControlMent", "mentpy.ControlMent.__init__", "mentpy.ControlMent.__repr__", "mentpy.ControlMent.angle", "mentpy.ControlMent.condition", "mentpy.ControlMent.copy", "mentpy.ControlMent.get_povm", "mentpy.ControlMent.is_trainable", "mentpy.ControlMent.matrix", "mentpy.ControlMent.plane", "mentpy.GraphState", "mentpy.GraphState.__contains__", "mentpy.GraphState.__eq__", "mentpy.GraphState.__getitem__", "mentpy.GraphState.__init__", "mentpy.GraphState.__iter__", "mentpy.GraphState.__len__", "mentpy.GraphState.__repr__", "mentpy.GraphState.__str__", "mentpy.GraphState.add_edge", "mentpy.GraphState.add_edges_from", "mentpy.GraphState.add_node", "mentpy.GraphState.add_nodes_from", "mentpy.GraphState.add_weighted_edges_from", "mentpy.GraphState.adj", "mentpy.GraphState.adjacency", "mentpy.GraphState.adjlist_inner_dict_factory", "mentpy.GraphState.adjlist_inner_dict_factory.__class_getitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__contains__", "mentpy.GraphState.adjlist_inner_dict_factory.__delitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__eq__", "mentpy.GraphState.adjlist_inner_dict_factory.__ge__", "mentpy.GraphState.adjlist_inner_dict_factory.__getattribute__", "mentpy.GraphState.adjlist_inner_dict_factory.__getitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__gt__", "mentpy.GraphState.adjlist_inner_dict_factory.__ior__", "mentpy.GraphState.adjlist_inner_dict_factory.__iter__", "mentpy.GraphState.adjlist_inner_dict_factory.__le__", "mentpy.GraphState.adjlist_inner_dict_factory.__len__", "mentpy.GraphState.adjlist_inner_dict_factory.__lt__", "mentpy.GraphState.adjlist_inner_dict_factory.__ne__", "mentpy.GraphState.adjlist_inner_dict_factory.__new__", "mentpy.GraphState.adjlist_inner_dict_factory.__or__", "mentpy.GraphState.adjlist_inner_dict_factory.__repr__", "mentpy.GraphState.adjlist_inner_dict_factory.__reversed__", "mentpy.GraphState.adjlist_inner_dict_factory.__ror__", "mentpy.GraphState.adjlist_inner_dict_factory.__setitem__", "mentpy.GraphState.adjlist_inner_dict_factory.clear", "mentpy.GraphState.adjlist_inner_dict_factory.copy", "mentpy.GraphState.adjlist_inner_dict_factory.fromkeys", "mentpy.GraphState.adjlist_inner_dict_factory.get", "mentpy.GraphState.adjlist_inner_dict_factory.items", "mentpy.GraphState.adjlist_inner_dict_factory.keys", "mentpy.GraphState.adjlist_inner_dict_factory.pop", "mentpy.GraphState.adjlist_inner_dict_factory.popitem", "mentpy.GraphState.adjlist_inner_dict_factory.setdefault", "mentpy.GraphState.adjlist_inner_dict_factory.update", "mentpy.GraphState.adjlist_inner_dict_factory.values", "mentpy.GraphState.clear", "mentpy.GraphState.clear_edges", "mentpy.GraphState.copy", "mentpy.GraphState.degree", "mentpy.GraphState.edge_subgraph", "mentpy.GraphState.edges", "mentpy.GraphState.get_edge_data", "mentpy.GraphState.has_edge", "mentpy.GraphState.has_node", "mentpy.GraphState.index_mapping", "mentpy.GraphState.is_directed", "mentpy.GraphState.is_multigraph", "mentpy.GraphState.name", "mentpy.GraphState.nbunch_iter", "mentpy.GraphState.neighbors", "mentpy.GraphState.nodes", "mentpy.GraphState.number_of_edges", "mentpy.GraphState.number_of_nodes", "mentpy.GraphState.order", "mentpy.GraphState.remove_edge", "mentpy.GraphState.remove_edges_from", "mentpy.GraphState.remove_node", "mentpy.GraphState.remove_nodes_from", "mentpy.GraphState.size", "mentpy.GraphState.stabilizers", "mentpy.GraphState.subgraph", "mentpy.GraphState.to_directed", "mentpy.GraphState.to_directed_class", "mentpy.GraphState.to_undirected", "mentpy.GraphState.to_undirected_class", "mentpy.GraphState.update", "mentpy.MBQCircuit", "mentpy.MBQCircuit.__delitem__", "mentpy.MBQCircuit.__getitem__", "mentpy.MBQCircuit.__init__", "mentpy.MBQCircuit.__len__", "mentpy.MBQCircuit.__repr__", "mentpy.MBQCircuit.__setitem__", "mentpy.MBQCircuit.add_edge", "mentpy.MBQCircuit.add_edges_from", "mentpy.MBQCircuit.calculate_order", "mentpy.MBQCircuit.classical_output_nodes", "mentpy.MBQCircuit.controlled_nodes", "mentpy.MBQCircuit.depth", "mentpy.MBQCircuit.flow", "mentpy.MBQCircuit.graph", "mentpy.MBQCircuit.input_nodes", "mentpy.MBQCircuit.inputc", "mentpy.MBQCircuit.measurement_order", "mentpy.MBQCircuit.measurements", "mentpy.MBQCircuit.ordered_layers", "mentpy.MBQCircuit.output_nodes", "mentpy.MBQCircuit.outputc", "mentpy.MBQCircuit.partial_order", "mentpy.MBQCircuit.quantum_output_nodes", "mentpy.MBQCircuit.trainable_nodes", "mentpy.Measurement", "mentpy.Measurement.__init__", "mentpy.Measurement.__repr__", "mentpy.Measurement.angle", "mentpy.Measurement.copy", "mentpy.Measurement.get_povm", "mentpy.Measurement.is_trainable", "mentpy.Measurement.matrix", "mentpy.Measurement.node_id", "mentpy.Measurement.outcome", "mentpy.Measurement.plane", "mentpy.Measurement.set_angle", "mentpy.MentOutcome", "mentpy.MentOutcome.__call__", "mentpy.MentOutcome.__eq__", "mentpy.MentOutcome.__ge__", "mentpy.MentOutcome.__gt__", "mentpy.MentOutcome.__init__", "mentpy.MentOutcome.__le__", "mentpy.MentOutcome.__lt__", "mentpy.MentOutcome.__ne__", "mentpy.MentOutcome.__or__", "mentpy.MentOutcome.__repr__", "mentpy.MentOutcome.cond_nodes", "mentpy.MentOutcome.node_id", "mentpy.NumpySimulatorDM", "mentpy.NumpySimulatorDM.__init__", "mentpy.NumpySimulatorDM.current_number_simulated_nodes", "mentpy.NumpySimulatorDM.current_simulated_nodes", "mentpy.NumpySimulatorDM.find_swaps", "mentpy.NumpySimulatorDM.future_neighbors_in_wire", "mentpy.NumpySimulatorDM.measure", "mentpy.NumpySimulatorDM.measure_ment", "mentpy.NumpySimulatorDM.neighbors_in_wire", "mentpy.NumpySimulatorDM.node_in_which_wire", "mentpy.NumpySimulatorDM.reorder_qubits", "mentpy.NumpySimulatorDM.reset", "mentpy.NumpySimulatorDM.run", "mentpy.NumpySimulatorSV", "mentpy.NumpySimulatorSV.__init__", "mentpy.NumpySimulatorSV.current_number_simulated_nodes", "mentpy.NumpySimulatorSV.current_simulated_nodes", "mentpy.NumpySimulatorSV.find_swaps", "mentpy.NumpySimulatorSV.future_neighbors_in_wire", "mentpy.NumpySimulatorSV.measure", "mentpy.NumpySimulatorSV.measure_ment", "mentpy.NumpySimulatorSV.neighbors_in_wire", "mentpy.NumpySimulatorSV.node_in_which_wire", "mentpy.NumpySimulatorSV.reorder_qubits", "mentpy.NumpySimulatorSV.reset", "mentpy.NumpySimulatorSV.run", "mentpy.PatternSimulator", "mentpy.PatternSimulator.__call__", "mentpy.PatternSimulator.__init__", "mentpy.PatternSimulator.__repr__", "mentpy.PatternSimulator.measure", "mentpy.PatternSimulator.reset", "mentpy.PatternSimulator.run", "mentpy.PauliOp", "mentpy.PauliOp.__eq__", "mentpy.PauliOp.__getitem__", "mentpy.PauliOp.__hash__", "mentpy.PauliOp.__init__", "mentpy.PauliOp.__mul__", "mentpy.PauliOp.__repr__", "mentpy.PauliOp.append", "mentpy.PauliOp.commutator", "mentpy.PauliOp.get_subset", "mentpy.PauliOp.number_of_qubits", "mentpy.PauliOp.symplectic_prod", "mentpy.PennylaneSimulator", "mentpy.PennylaneSimulator.__init__", "mentpy.PennylaneSimulator.measure", "mentpy.PennylaneSimulator.reset", "mentpy.PennylaneSimulator.run", "mentpy.draw", "mentpy.draw_with_wires", "mentpy.hstack", "mentpy.mbqc.flow.Flow", "mentpy.mbqc.flow.Flow.__call__", "mentpy.mbqc.flow.Flow.__init__", "mentpy.mbqc.flow.Flow.__repr__", "mentpy.mbqc.flow.Flow.adapt_angle", "mentpy.mbqc.flow.Flow.adapt_angles", "mentpy.mbqc.flow.Flow.correction_op", "mentpy.mbqc.flow.Flow.generator_op", "mentpy.mbqc.flow.Flow.initialize_flow", "mentpy.mbqc.flow.find_cflow", "mentpy.mbqc.flow.find_gflow", "mentpy.mbqc.flow.find_pflow", "mentpy.mbqc.flow.odd_neighborhood", "mentpy.mbqc.templates.from_pauli", "mentpy.mbqc.templates.grid_cluster", "mentpy.mbqc.templates.linear_cluster", "mentpy.mbqc.templates.many_wires", "mentpy.mbqc.templates.muta", "mentpy.merge", "mentpy.parse_version", "mentpy.utils.FlowSpace", "mentpy.utils.FlowSpace.__init__", "mentpy.utils.FlowSpace.__repr__", "mentpy.utils.are_lc_equivalent", "mentpy.utils.calculate_complete_gens", "mentpy.utils.calculate_gens", "mentpy.utils.calculate_lie_algebra", "mentpy.utils.calculate_ordered_gens", "mentpy.utils.digraph_expressivity_of_flow_space", "mentpy.utils.dim_so", "mentpy.utils.dim_sp", "mentpy.utils.dim_su", "mentpy.utils.draw_digraph_flow_space", "mentpy.utils.expressivity_with_histogram", "mentpy.utils.generate_haar_random_states", "mentpy.utils.generate_random_dataset", "mentpy.utils.generate_random_dataset_noisy", "mentpy.utils.lc_cluster_flowspace", "mentpy.utils.lie_algebra_completion", "mentpy.utils.sample_probability_density_of_fidelities", "mentpy.utils.train_test_split", "mentpy.vstack", "mentpy.optimizers.AdamOpt", "mentpy.optimizers.AdamOpt.__init__", "mentpy.optimizers.AdamOpt.optimize", "mentpy.optimizers.AdamOpt.optimize_and_gradient_norm", "mentpy.optimizers.AdamOpt.reset", "mentpy.optimizers.AdamOpt.step", "mentpy.optimizers.AdamOpt.update_step_size", "mentpy.optimizers.RCDOpt", "mentpy.optimizers.RCDOpt.__init__", "mentpy.optimizers.RCDOpt.optimize", "mentpy.optimizers.RCDOpt.optimize_and_gradient_norm", "mentpy.optimizers.RCDOpt.reset", "mentpy.optimizers.RCDOpt.step", "mentpy.optimizers.RCDOpt.update_step_size", "mentpy.optimizers.SGDOpt", "mentpy.optimizers.SGDOpt.__init__", "mentpy.optimizers.SGDOpt.optimize", "mentpy.optimizers.SGDOpt.optimize_and_gradient_norm", "mentpy.optimizers.SGDOpt.reset", "mentpy.optimizers.SGDOpt.step", "mentpy.optimizers.SGDOpt.update_step_size", "Graph States", "Creating MBQC Circuits", "Single qubit measurements", "Simulating MBQC Circuits", "Installation", "Welcome to MentPy\u2019s documentation", "Classifying classical data", "Fisher information classifier", "Discrete optimization for HEA", "Introduction to Measurement-based VQE", "An introduction to MB-QML", "Parallelizing MB-QML protocols", "Learning a quantum instrument"], "titleterms": {"": 271, "acknowledg": 271, "also": [1, 21, 27, 30, 31, 32, 33, 34, 71, 82, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 176, 195, 245, 259], "an": 276, "base": 275, "circuit": [267, 269, 274], "citat": 271, "class": 21, "classic": 272, "classifi": [272, 273], "code": [274, 276, 277, 278], "conclus": 274, "constructor": [1, 11, 21, 37, 100, 125, 137, 150, 163, 176, 183, 195, 203, 223, 245, 252, 259], "contribut": 271, "creat": 267, "curv": [274, 276, 277, 278], "data": 272, "deep": 274, "develop": 270, "differ": 269, "discret": 274, "document": 271, "environ": 274, "exact": 278, "featur": 271, "fisher": 273, "flow": 0, "from": 270, "function": 274, "graph": 266, "graphstat": 266, "greedi": 274, "hea": 274, "inform": 273, "input": 269, "instal": 270, "instrument": 278, "introduct": [275, 276], "learn": [274, 276, 277, 278], "loss": 274, "mb": [276, 277], "mbqc": [267, 269], "mbqcircuit": 0, "measur": [268, 275], "ment": 267, "mentpi": 271, "method": [1, 11, 21, 37, 100, 125, 137, 150, 163, 176, 183, 195, 203, 245, 252, 259], "note": [1, 267, 269, 271, 272, 273, 274, 275, 277, 278], "oper": [0, 267], "optim": [0, 274], "parallel": 277, "pip": 270, "plot": [274, 276, 277, 278], "properti": [1, 11, 21, 100, 125, 137, 150, 163, 183, 195], "protocol": 277, "q": 274, "qml": [276, 277], "quantum": [274, 278], "qubit": 268, "refer": [267, 272, 276], "represent": [1, 11, 21, 37, 100, 125, 137, 150, 163, 176, 183, 195, 203, 223], "roadmap": 271, "run": 269, "search": 274, "see": [1, 21, 27, 30, 31, 32, 33, 34, 71, 82, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 176, 195, 245, 259], "set": 274, "simul": [0, 269], "singl": 268, "solut": 278, "sourc": 270, "special": [1, 21, 37, 100, 137, 150, 163, 176, 183, 195, 203], "stabil": 266, "state": 266, "string": [1, 11, 21, 37, 100, 125, 137, 150, 163, 176, 183, 195, 203, 223], "templat": [0, 267], "test": 270, "up": 274, "us": 270, "util": 0, "vqe": 275, "welcom": 271}})